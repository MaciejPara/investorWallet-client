{"version":3,"sources":["views/register/index.js"],"names":["Views","match","url","history","useState","email","password","user","useDispatch","useStore","getState","authUser","useEffect","push","className","to"],"mappings":"qLAyIeA,UAjID,SAAC,GAAgC,EAA9BC,MAASC,IAAsB,IAAfC,EAAc,EAAdA,QAAc,EACrBC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAItCC,GAL2B,oBAE1BC,cAIbC,cAAWC,WADXC,SAAYJ,MAGhBK,qBAAU,WACFL,GAAQA,EAAKF,OACbF,EAAQU,KAAR,WA0DR,OACI,oCACI,yBAAKC,UAAW,mBACZ,kBAAC,IAAD,CAASC,GAAE,KACP,uBAAGD,UAAU,0BAGrB,yBAAKA,UAAW,wBACZ","file":"static/js/16.bcf38d51.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport { LOGIN_USER } from \"../../redux/actions\";\nimport { store } from \"react-notifications-component\";\nimport FetchClient from \"../../utils/FetchClient\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Views = ({ match: { url }, history }) => {\n    const [credentials] = useState({ email: \"\", password: \"\" });\n    const dispatch = useDispatch();\n\n    const {\n        authUser: { user },\n    } = useStore().getState();\n\n    useEffect(() => {\n        if (user && user.email) {\n            history.push(`/app`);\n        }\n    });\n\n    const handleSubmit = async (values) => {\n        try {\n            const result = await FetchClient.post({\n                url: \"signin\",\n                body: values,\n            });\n\n            if (result) {\n                localStorage.setItem(\n                    \"investorWalletUser\",\n                    JSON.stringify(result)\n                );\n\n                dispatch({\n                    type: LOGIN_USER,\n                    payload: { user: result },\n                });\n                history.push(`/app`);\n            }\n        } catch (e) {\n            store.addNotification({\n                title: \"Failure\",\n                message: e.toString(),\n                type: \"danger\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                    duration: 3000,\n                    onScreen: true,\n                },\n            });\n            console.error(e);\n        }\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        if (!values.password) {\n            errors.password = \"Required\";\n        }\n\n        if (!values.email) {\n            errors.email = \"Required\";\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = \"Invalid email address\";\n        }\n        return errors;\n    };\n\n    return (\n        <>\n            <div className={\"logoutContainer\"}>\n                <NavLink to={`/`}>\n                    <i className=\"fas fa-sign-out-alt\" />\n                </NavLink>\n            </div>\n            <div className={\"formContainer m-auto\"}>\n                <h1>Register user</h1>\n                {/*<Formik*/}\n                {/*initialValues={credentials}*/}\n                {/*validate={handleValidation}*/}\n                {/*onSubmit={handleSubmit}*/}\n                {/*>*/}\n                {/*{({*/}\n                {/*values,*/}\n                {/*errors,*/}\n                {/*touched,*/}\n                {/*handleChange,*/}\n                {/*handleBlur,*/}\n                {/*handleSubmit,*/}\n                {/*isSubmitting,*/}\n                {/*}) => (*/}\n                {/*<form className={\"form\"} onSubmit={handleSubmit}>*/}\n                {/*<input*/}\n                {/*type=\"email\"*/}\n                {/*name=\"email\"*/}\n                {/*placeholder={\"email\"}*/}\n                {/*onChange={handleChange}*/}\n                {/*onBlur={handleBlur}*/}\n                {/*value={values.email}*/}\n                {/*/>*/}\n                {/*<span className={\"formValidationError\"}>*/}\n                {/*{errors.email && touched.email && errors.email}*/}\n                {/*</span>*/}\n                {/*<input*/}\n                {/*type=\"password\"*/}\n                {/*name=\"password\"*/}\n                {/*placeholder={\"password\"}*/}\n                {/*onChange={handleChange}*/}\n                {/*onBlur={handleBlur}*/}\n                {/*value={values.password}*/}\n                {/*/>*/}\n                {/*<span className={\"formValidationError\"}>*/}\n                {/*{errors.email && touched.email && errors.email}*/}\n                {/*</span>*/}\n                {/*<button*/}\n                {/*className={\"formSubmitButton\"}*/}\n                {/*type=\"submit\"*/}\n                {/*disabled={isSubmitting}*/}\n                {/*>*/}\n                {/*Submit*/}\n                {/*</button>*/}\n                {/*</form>*/}\n                {/*)}*/}\n                {/*</Formik>*/}\n            </div>\n        </>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}