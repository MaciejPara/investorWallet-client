{"version":3,"sources":["components/transactionEditor/index.js","views/app/wallet/index.js"],"names":["TransactionEditor","handleValidation","handleSubmit","whatAutocomplete","autocompleteStyles","autocompleteItems","setWhatAutocomplete","fromAutocompleteItems","fromAutocomplete","setFromAutocomplete","setNewTransaction","handleCancel","edit","className","initialValues","what","count","from","price","validate","onSubmit","values","errors","handleChange","touched","handleBlur","isSubmitting","htmlFor","wrapperStyle","width","menuStyle","getItemValue","item","label","items","filter","value","includes","toLowerCase","placeholder","renderItem","onChange","currentTarget","onSelect","val","target","name","type","onBlur","disabled","onClick","WalletComponent","dispatch","useDispatch","useState","transactions","setTransactions","isNewTransaction","whatFilter","setWhatFilter","fromFilter","setFromFilter","setAutocompleteItems","setFromAutocompleteItems","amountOfWallet","setAmountOfWallet","startAmountOfWallet","setStartAmountOfWallet","editId","setEditId","borderRadius","boxShadow","background","padding","fontSize","position","overflow","maxHeight","useSelector","collections","base","settings","initFlag","SET_INIT_FLAG","categories","forEach","model","GET_CATEGORY_DATA","payload","url","getAllUrl","category","getCategoryName","whatData","rate","fromData","data","el","result","push","JSON","stringify","useEffect","currentResult","priceResult","currentPrice","parseFloat","toFixed","userId","authUser","user","id","a","FetchClient","get","length","map","getCurrentPrice","_id","currentPricePercentage","calcPercentage","createdAt","moment","toString","format","found","find","foundFrom","investment","Date","now","post","body","console","error","handleEdit","updateData","update","ok","store","addNotification","title","message","insert","container","animationIn","animationOut","dismiss","duration","onScreen","handleInvestmentDelete","delete","getDifferenceClass","walletPercentage","e","key","to","handleEditValidation"],"mappings":"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","file":"static/js/14.61c55cd7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Formik } from \"formik\";\nimport Autocomplete from \"react-autocomplete\";\n\nconst TransactionEditor = ({\n    handleValidation,\n    handleSubmit,\n    whatAutocomplete,\n    autocompleteStyles,\n    autocompleteItems,\n    setWhatAutocomplete,\n    fromAutocompleteItems,\n    fromAutocomplete,\n    setFromAutocomplete,\n    setNewTransaction,\n    handleCancel,\n    edit,\n}) => {\n    return (\n        <div className={\"newTransaction\"}>\n            <Formik\n                initialValues={{\n                    what: \"\",\n                    count: \"\",\n                    from: \"\",\n                    price: \"\",\n                }}\n                validate={handleValidation}\n                onSubmit={handleSubmit}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                }) => (\n                    <form\n                        className={\"newTransaction-form\"}\n                        onSubmit={handleSubmit}\n                    >\n                        <div className={\"fieldsContainer\"}>\n                            {!edit && (\n                                <div className={`formField ${errors.what}`}>\n                                    <label htmlFor=\"what\">What</label>\n                                    <Autocomplete\n                                        wrapperStyle={{\n                                            width: \"100%\",\n                                        }}\n                                        menuStyle={autocompleteStyles}\n                                        getItemValue={(item) => item.label}\n                                        items={autocompleteItems.filter(\n                                            ({ value }) =>\n                                                value.includes(\n                                                    whatAutocomplete.toLowerCase()\n                                                )\n                                        )}\n                                        placeholder={\"What\"}\n                                        renderItem={({ label }) => (\n                                            <div\n                                                className={\"autocomplete-item\"}\n                                            >\n                                                {label}\n                                            </div>\n                                        )}\n                                        value={whatAutocomplete}\n                                        onChange={({\n                                            currentTarget: { value },\n                                        }) => {\n                                            setWhatAutocomplete(value);\n                                        }}\n                                        onSelect={(val) => {\n                                            handleChange({\n                                                target: {\n                                                    name: \"what\",\n                                                    value: val,\n                                                },\n                                                currentTarget: {\n                                                    name: \"what\",\n                                                    value: val,\n                                                },\n                                            });\n                                            setWhatAutocomplete(val);\n                                        }}\n                                    />\n                                </div>\n                            )}\n                            <div className={`formField ${errors.count}`}>\n                                <label htmlFor=\"count\">Count</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"count\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.count}\n                                />\n                            </div>\n                            {!edit && (\n                                <div className={`formField ${errors.from}`}>\n                                    <label htmlFor=\"from\">From</label>\n                                    <Autocomplete\n                                        wrapperStyle={{\n                                            width: \"100%\",\n                                        }}\n                                        menuStyle={autocompleteStyles}\n                                        getItemValue={(item) => item.label}\n                                        items={fromAutocompleteItems.filter(\n                                            ({ value }) =>\n                                                value.includes(\n                                                    fromAutocomplete.toLowerCase()\n                                                )\n                                        )}\n                                        renderItem={({ label }) => (\n                                            <div\n                                                className={\"autocomplete-item\"}\n                                            >\n                                                {label}\n                                            </div>\n                                        )}\n                                        value={fromAutocomplete}\n                                        onChange={({\n                                            currentTarget: { value },\n                                        }) => {\n                                            setFromAutocomplete(value);\n                                        }}\n                                        onSelect={(val) => {\n                                            handleChange({\n                                                target: {\n                                                    name: \"from\",\n                                                    value: val,\n                                                },\n                                                currentTarget: {\n                                                    name: \"from\",\n                                                    value: val,\n                                                },\n                                            });\n                                            setFromAutocomplete(val);\n                                        }}\n                                    />\n                                </div>\n                            )}\n                            <div className={`formField ${errors.price}`}>\n                                <label htmlFor=\"price\">Price</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"price\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.price}\n                                />\n                            </div>\n                            <div className={\"buttonsContainer\"}>\n                                <button\n                                    className={\"formButton\"}\n                                    type=\"submit\"\n                                    disabled={isSubmitting}\n                                >\n                                    {!edit ? \"Add\" : \"Edit\"}\n                                </button>\n                                <button\n                                    className={\"formButton formButton-cancel\"}\n                                    type=\"cancel\"\n                                    onClick={() => {\n                                        if (handleCancel) {\n                                            handleCancel();\n                                        } else {\n                                            setNewTransaction(false);\n                                        }\n                                    }}\n                                >\n                                    Cancel\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nexport default TransactionEditor;\n","import React, { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport {\n    GET_CATEGORY_DATA,\n    SET_INIT_FLAG,\n} from \"../../../redux/collections/actions\";\nimport FetchClient from \"../../../utils/FetchClient\";\nimport TransactionEditor from \"../../../components/transactionEditor\";\nimport { store } from \"react-notifications-component\";\nimport { NavLink } from \"react-router-dom\";\n\nconst WalletComponent = () => {\n    const dispatch = useDispatch();\n    const [transactions, setTransactions] = useState([]);\n    const [isNewTransaction, setNewTransaction] = useState(false);\n    const [whatFilter, setWhatFilter] = useState(\"\");\n    const [fromFilter, setFromFilter] = useState(\"\");\n    const [autocompleteItems, setAutocompleteItems] = useState([]);\n    const [fromAutocompleteItems, setFromAutocompleteItems] = useState([]);\n    const [whatAutocomplete, setWhatAutocomplete] = useState(\"\");\n    const [fromAutocomplete, setFromAutocomplete] = useState(\"\");\n    const [amountOfWallet, setAmountOfWallet] = useState(0);\n    const [startAmountOfWallet, setStartAmountOfWallet] = useState(0);\n    const [editId, setEditId] = useState();\n    const [autocompleteStyles, setAutocompleteStyles] = useState({\n        borderRadius: \"3px\",\n        boxShadow: \"0 2px 12px rgba(0, 0, 0, 0.1)\",\n        background: \"rgba(255, 255, 255, 0.9)\",\n        padding: \"2px 0\",\n        fontSize: \"90%\",\n        position: \"fixed\",\n        overflow: \"auto\",\n        maxHeight: \"200px\",\n    });\n\n    useSelector(({ collections, settings: { base } }) => {\n        if (!collections.initFlag) {\n            dispatch({\n                type: SET_INIT_FLAG,\n            });\n\n            collections.categories.forEach((item) => {\n                const model = collections[item]?.model;\n\n                dispatch({\n                    type: GET_CATEGORY_DATA,\n                    payload: {\n                        url: model.getAllUrl(base),\n                        category: model.getCategoryName(),\n                    },\n                });\n            });\n        }\n    });\n\n    useSelector(\n        ({\n            collections: { categories, ...collections },\n            settings: { base },\n        }) => {\n            let whatData = [\n                { label: base, value: base.toLowerCase(), rate: 1 },\n            ];\n            let fromData = [\n                { label: base, value: base.toLowerCase(), rate: 1 },\n            ];\n\n            categories?.forEach((item) => {\n                collections[item].data?.forEach((el) => {\n                    const result = {\n                        label: el.name,\n                        value: el.name.toLowerCase(),\n                        ...el,\n                    };\n\n                    whatData.push(result);\n\n                    if (item === \"currencies\") {\n                        fromData.push(result);\n                    }\n                });\n            });\n\n            if (\n                JSON.stringify(autocompleteItems) !== JSON.stringify(whatData)\n            ) {\n                setAutocompleteItems(whatData);\n            }\n\n            if (\n                JSON.stringify(fromAutocompleteItems) !==\n                JSON.stringify(fromData)\n            ) {\n                setFromAutocompleteItems(fromData);\n            }\n        }\n    );\n\n    useEffect(() => {\n        let currentResult = 0;\n        let priceResult = 0;\n\n        transactions.forEach(({ price, currentPrice }) => {\n            currentResult += parseFloat(currentPrice);\n            priceResult += parseFloat(price);\n        });\n\n        setAmountOfWallet(currentResult.toFixed(2));\n        setStartAmountOfWallet(priceResult.toFixed(2));\n    }, [transactions]);\n\n    const userId = useSelector(({ ...store }) => store.authUser.user.id);\n\n    useEffect(() => {\n        if (userId) {\n            (async () => {\n                const result = await FetchClient.get({\n                    url: `/investments?filter=${JSON.stringify({\n                        userId: userId,\n                    })}`,\n                });\n\n                if (result.length !== transactions.length) {\n                    setTransactions(\n                        result.map((item) => {\n                            const currentPrice = getCurrentPrice(item);\n\n                            return {\n                                ...item,\n                                id: item._id,\n                                currentPrice,\n                                currentPricePercentage: calcPercentage(\n                                    item.price,\n                                    currentPrice\n                                ),\n                                createdAt: moment(\n                                    item.createdAt.toString()\n                                ).format(\"DD.MM.YYYY - HH:mm:ss\"),\n                            };\n                        })\n                    );\n                }\n            })();\n        }\n    }, [transactions, autocompleteItems, userId]);\n\n    const getCurrentPrice = (item) => {\n        const found = autocompleteItems.find(\n            ({ value }) => item.what.toLowerCase() === value\n        );\n        const foundFrom = autocompleteItems.find(\n            ({ value }) => item.from.toLowerCase() === value\n        );\n\n        return ((found?.rate * item.count) / foundFrom?.rate || 0).toFixed(2);\n    };\n\n    const handleAddTransaction = () => {\n        setNewTransaction(true);\n    };\n\n    const handleSubmit = async (data) => {\n        const investment = {\n            id: Date.now(),\n            ...data,\n            currentPrice: getCurrentPrice(data),\n        };\n\n        try {\n            const result = await FetchClient.post({\n                url: \"/investment\",\n                body: {\n                    userId,\n                    ...investment,\n                },\n            });\n\n            investment.id = result?._id || investment.id;\n        } catch (e) {\n            console.error(e);\n        }\n\n        setNewTransaction(false);\n        setTransactions([\n            ...transactions,\n            {\n                ...investment,\n                currentPricePercentage: calcPercentage(\n                    investment.price,\n                    investment.currentPrice\n                ),\n                createdAt: moment(new Date().toString()).format(\n                    \"DD.MM.YYYY - HH:mm:ss\"\n                ),\n            },\n        ]);\n    };\n\n    const handleEdit = async (data) => {\n        const investment = transactions.find(({ id }) => id === editId);\n\n        const updateData = {\n            count: data.count,\n            price: data.price,\n        };\n\n        try {\n            const { ok } =\n                (await FetchClient.update({\n                    url: `/investment/${investment.id}`,\n                    body: updateData,\n                })) || {};\n\n            if (ok) {\n                const currentPrice = getCurrentPrice({\n                    ...investment,\n                    ...updateData,\n                });\n\n                setEditId();\n                setTransactions(\n                    transactions.map((item) => {\n                        if (item.id === investment.id) {\n                            item = {\n                                ...item,\n                                ...updateData,\n                                currentPrice,\n                                currentPricePercentage: calcPercentage(\n                                    data.price,\n                                    currentPrice\n                                ),\n                            };\n                        }\n\n                        return item;\n                    })\n                );\n\n                store.addNotification({\n                    title: \"Update\",\n                    message: \"Investment successfully updated\",\n                    type: \"success\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    animationIn: [\"animated\", \"fadeIn\"],\n                    animationOut: [\"animated\", \"fadeOut\"],\n                    dismiss: {\n                        duration: 5000,\n                        onScreen: true,\n                    },\n                });\n            } else {\n                store.addNotification({\n                    title: \"Update\",\n                    message: \"Update error, please try again\",\n                    type: \"error\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    animationIn: [\"animated\", \"fadeIn\"],\n                    animationOut: [\"animated\", \"fadeOut\"],\n                    dismiss: {\n                        duration: 5000,\n                        onScreen: true,\n                    },\n                });\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    const filterTransactions = ({ what, from }) => {\n        return (\n            what.toLowerCase().includes(whatFilter) &&\n            from.toLowerCase().includes(fromFilter)\n        );\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        [\"what\", \"count\", \"from\", \"price\"].forEach((item) => {\n            if (!values[item]) {\n                errors[item] = \"Required\";\n            }\n        });\n\n        return errors;\n    };\n\n    const handleEditValidation = (values) => {\n        const errors = {};\n\n        [\"count\", \"price\"].forEach((item) => {\n            if (!values[item]) {\n                errors[item] = \"Required\";\n            }\n        });\n\n        return errors;\n    };\n\n    const handleInvestmentDelete = async (id) => {\n        try {\n            await FetchClient.delete({\n                url: `/investment/${id}`,\n            });\n        } catch (e) {\n            console.error(e);\n        }\n\n        setTransactions([...transactions.filter(({ id: tId }) => tId !== id)]);\n    };\n\n    const calcPercentage = (price, currentPrice) => {\n        return ((currentPrice / price) * 100 - 100 || 0).toFixed(1);\n    };\n\n    const getDifferenceClass = (price) => {\n        return price > 0 ? \"plus\" : \"minus\";\n    };\n\n    const walletPercentage = calcPercentage(\n        startAmountOfWallet,\n        amountOfWallet\n    );\n\n    return (\n        <div>\n            <h2 className={`sectionTitle`}>\n                Wallet ammount:{\" \"}\n                <span\n                    className={`difference ${getDifferenceClass(\n                        walletPercentage\n                    )}`}\n                >\n                    {amountOfWallet || 0} | {walletPercentage}%\n                </span>\n            </h2>\n\n            <button\n                className={\"addTransactionButton\"}\n                onClick={handleAddTransaction}\n            >\n                <span>Add investment</span>{\" \"}\n                <i className=\"fa-solid fa-plus addIcon\" />\n            </button>\n            {isNewTransaction && (\n                <TransactionEditor\n                    handleValidation={(e) => handleValidation(e)}\n                    handleSubmit={(e) => handleSubmit(e)}\n                    whatAutocomplete={whatAutocomplete}\n                    autocompleteStyles={autocompleteStyles}\n                    autocompleteItems={autocompleteItems}\n                    setWhatAutocomplete={setWhatAutocomplete}\n                    fromAutocompleteItems={fromAutocompleteItems}\n                    fromAutocomplete={fromAutocomplete}\n                    setFromAutocomplete={setFromAutocomplete}\n                    setNewTransaction={setNewTransaction}\n                />\n            )}\n            {transactions.length ? (\n                <h3 className={\"sectionTitle mt-4\"}>Investments:</h3>\n            ) : (\n                \"\"\n            )}\n            <div className={\"transactionContainer tableContainer\"}>\n                {transactions.length ? (\n                    <div>\n                        <div\n                            className={\n                                \"tableHeaderContainer row w-100 m-auto d-flex\"\n                            }\n                        >\n                            <span className={\"tableHeader\"}>When</span>\n                            <span className={\"tableHeader\"}>\n                                <input\n                                    type=\"text\"\n                                    placeholder={\"What 🔍\"}\n                                    value={whatFilter}\n                                    onChange={({ currentTarget: { value } }) =>\n                                        setWhatFilter(value.toLowerCase())\n                                    }\n                                />\n                            </span>\n                            <span className={\"tableHeader\"}>Count</span>\n                            <span className={\"tableHeader\"}>\n                                <input\n                                    type=\"text\"\n                                    placeholder={\"From 🔍\"}\n                                    value={fromFilter}\n                                    onChange={({ currentTarget: { value } }) =>\n                                        setFromFilter(value.toLowerCase())\n                                    }\n                                />\n                            </span>\n                            <span className={\"tableHeader m-auto\"}>Price</span>\n                            <span className={\"tableHeader m-auto\"}>\n                                Current Price\n                            </span>\n                            <span className={\"tableHeader m-auto\"} />\n                        </div>\n                    </div>\n                ) : (\n                    \"\"\n                )}\n                <div className={\"d-flex w-100 m-auto flex-column\"}>\n                    {transactions\n                        .filter(filterTransactions)\n                        .map(\n                            (\n                                {\n                                    id,\n                                    what,\n                                    count,\n                                    from,\n                                    price,\n                                    createdAt,\n                                    currentPrice,\n                                    currentPricePercentage,\n                                },\n                                key\n                            ) => (\n                                <div key={key}>\n                                    <div\n                                        key={key}\n                                        className={\n                                            \"transaction categoryItem row w-100 m-auto d-flex\"\n                                        }\n                                    >\n                                        <span className={\"cell date\"}>\n                                            {createdAt}\n                                        </span>\n                                        <span className={\"cell\"}>{what}</span>\n                                        <span className={\"cell\"}>{count}</span>\n                                        <span className={\"cell\"}>{from}</span>\n                                        <span className={\"cell\"}>{price}</span>\n                                        <span\n                                            className={`cell m-auto ${getDifferenceClass(\n                                                currentPricePercentage\n                                            )} currentPrice`}\n                                        >\n                                            <span>{currentPrice} | </span>\n                                            <span className={\"percentage\"}>\n                                                {currentPricePercentage}%\n                                            </span>\n                                        </span>\n                                        <span className={\"cell actions\"}>\n                                            <i\n                                                className=\"far fa-trash-alt\"\n                                                onClick={() =>\n                                                    handleInvestmentDelete(id)\n                                                }\n                                            />\n                                            <i\n                                                className=\"fas fa-pencil-alt\"\n                                                onClick={() => setEditId(id)}\n                                            />\n                                            <NavLink\n                                                className=\"d-inline-flex mr-1 ml-1\"\n                                                to={`/app/details/${id}`}\n                                            >\n                                                <i className=\"fas fa-info-circle ml-4\" />\n                                            </NavLink>\n                                        </span>\n                                    </div>\n                                    {id === editId && (\n                                        <TransactionEditor\n                                            edit={true}\n                                            handleValidation={(e) =>\n                                                handleEditValidation(e)\n                                            }\n                                            handleSubmit={(e) => handleEdit(e)}\n                                            handleCancel={() => setEditId()}\n                                            whatAutocomplete={whatAutocomplete}\n                                            autocompleteStyles={\n                                                autocompleteStyles\n                                            }\n                                            autocompleteItems={\n                                                autocompleteItems\n                                            }\n                                            setWhatAutocomplete={\n                                                setWhatAutocomplete\n                                            }\n                                            fromAutocompleteItems={\n                                                fromAutocompleteItems\n                                            }\n                                            fromAutocomplete={fromAutocomplete}\n                                            setFromAutocomplete={\n                                                setFromAutocomplete\n                                            }\n                                            setNewTransaction={\n                                                setNewTransaction\n                                            }\n                                        />\n                                    )}\n                                </div>\n                            )\n                        )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default WalletComponent;\n"],"sourceRoot":""}