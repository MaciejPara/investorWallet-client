{"version":3,"sources":["views/register/index.js"],"names":["Views","match","url","history","useState","email","password","passwordRepeat","credentials","dispatch","useDispatch","user","useStore","getState","authUser","useEffect","push","handleSubmit","values","a","setSubmitting","type","LOADER","FetchClient","post","body","result","store","addNotification","title","message","insert","container","animationIn","animationOut","dismiss","duration","onScreen","toString","console","error","className","to","initialValues","validate","errors","length","test","onSubmit","touched","handleChange","handleBlur","isSubmitting","name","placeholder","onChange","onBlur","value","autoComplete","disabled"],"mappings":"oMAuLeA,UA/KD,SAAC,GAAgC,EAA9BC,MAASC,IAAsB,IAAfC,EAAc,EAAdA,QAC7B,EAAsBC,mBAAS,CAC3BC,MAAO,GACPC,SAAU,GACVC,eAAgB,KAHbC,EAAP,oBAKMC,EAAWC,cAGDC,EACZC,cAAWC,WADXC,SAAYH,KAGhBI,qBAAU,WACFJ,GAAQA,EAAKN,OACbF,EAAQa,KAAR,WAIR,IAAMC,EAAY,uCAAG,WAAOC,EAAP,oBAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,cAAjB,SAEbX,EAAS,CAAEY,KAAMC,MAFJ,SAIQC,IAAYC,KAAK,CAClCtB,IAAK,UACLuB,KAAMP,IANG,OAIPQ,EAJO,OASbN,GAAc,GAEdX,EAAS,CAAEY,KAAMC,MAEbI,IACAC,QAAMC,gBAAgB,CAClBC,MAAO,UACPC,QAAO,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAQI,QACjBT,KAAM,UACNU,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,KAIlBlC,EAAQa,KAAR,WA5BS,kDA+BbW,QAAMC,gBAAgB,CAClBC,MAAO,UACPC,QAAS,KAAEQ,WACXjB,KAAM,SACNU,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,KAGlB5B,EAAS,CAAEY,KAAMC,MACjBF,GAAc,GACdmB,QAAQC,MAAR,MA9Ca,0DAAH,wDAkFlB,OACI,qCACI,qBAAKC,UAAW,4BAAhB,SACI,cAAC,IAAD,CAASC,GAAE,IAAX,SACI,mBAAGD,UAAU,4BAGrB,sBAAKA,UAAW,uBAAhB,UACI,0CACA,cAAC,IAAD,CACIE,cAAenC,EACfoC,SA3CS,SAAC1B,GACtB,IAAM2B,EAAS,GA4Bf,OA1BK3B,EAAOZ,WACRuC,EAAOvC,SAAW,YAGjBY,EAAOX,iBACRsC,EAAOtC,eAAiB,YAIxBW,EAAOX,gBACPW,EAAOZ,WAAaY,EAAOX,iBAE3BsC,EAAOtC,eAAiB,+BAGxBW,EAAOZ,UAAYY,EAAOZ,SAASwC,OAAS,IAC5CD,EAAOvC,SAAW,gDAGjBY,EAAOb,MAGP,2CAA2C0C,KAAK7B,EAAOb,SAExDwC,EAAOxC,MAAQ,yBAJfwC,EAAOxC,MAAQ,WAMZwC,GAeKG,SAAU/B,EAHd,SAKK,gBACGC,EADH,EACGA,OACA2B,EAFH,EAEGA,OACAI,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACAlC,EANH,EAMGA,aACAmC,EAPH,EAOGA,aAPH,OASG,uBAAMX,UAAW,OAAQO,SAAU/B,EAAnC,UACI,uBACII,KAAK,QACLgC,KAAK,QACLC,YAAa,QACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOvC,EAAOb,QAElB,sBAAMoC,UAAW,sBAAjB,SACKQ,EAAQ5C,OAASwC,EAAOxC,QAE7B,uBACIgB,KAAK,WACLgC,KAAK,WACLC,YAAa,WACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOvC,EAAOZ,SACdoD,aAAa,iBAEjB,sBAAMjB,UAAW,sBAAjB,SACKQ,EAAQ3C,UAAYuC,EAAOvC,WAEhC,uBACIe,KAAK,WACLgC,KAAK,iBACLC,YAAa,kBACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOvC,EAAOX,eACdmD,aAAa,iBAEjB,sBAAMjB,UAAW,sBAAjB,SACKQ,EAAQ1C,gBACLsC,EAAOtC,iBAEf,wBACIkC,UAAW,mBACXpB,KAAK,SACLsC,SAAUP,EAHd","file":"static/js/19.164cba32.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport { LOADER, LOGIN_USER } from \"../../redux/actions\";\nimport { store } from \"react-notifications-component\";\nimport FetchClient from \"../../utils/FetchClient\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Views = ({ match: { url }, history }) => {\n    const [credentials] = useState({\n        email: \"\",\n        password: \"\",\n        passwordRepeat: \"\",\n    });\n    const dispatch = useDispatch();\n\n    const {\n        authUser: { user },\n    } = useStore().getState();\n\n    useEffect(() => {\n        if (user && user.email) {\n            history.push(`/app`);\n        }\n    });\n\n    const handleSubmit = async (values, { setSubmitting }) => {\n        try {\n            dispatch({ type: LOADER });\n\n            const result = await FetchClient.post({\n                url: \"/signup\",\n                body: values,\n            });\n\n            setSubmitting(false);\n\n            dispatch({ type: LOADER });\n\n            if (result) {\n                store.addNotification({\n                    title: \"Success\",\n                    message: result?.message,\n                    type: \"success\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    animationIn: [\"animated\", \"fadeIn\"],\n                    animationOut: [\"animated\", \"fadeOut\"],\n                    dismiss: {\n                        duration: 4000,\n                        onScreen: true,\n                    },\n                });\n\n                history.push(`/login`);\n            }\n        } catch (e) {\n            store.addNotification({\n                title: \"Failure\",\n                message: e.toString(),\n                type: \"danger\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                    duration: 3000,\n                    onScreen: true,\n                },\n            });\n            dispatch({ type: LOADER });\n            setSubmitting(false);\n            console.error(e);\n        }\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        if (!values.password) {\n            errors.password = \"Required\";\n        }\n\n        if (!values.passwordRepeat) {\n            errors.passwordRepeat = \"Required\";\n        }\n\n        if (\n            values.passwordRepeat &&\n            values.password !== values.passwordRepeat\n        ) {\n            errors.passwordRepeat = \"Passwords are not the same.\";\n        }\n\n        if (values.password && values.password.length < 8) {\n            errors.password = \"Password must be at least 8 characters long.\";\n        }\n\n        if (!values.email) {\n            errors.email = \"Required\";\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = \"Invalid email address\";\n        }\n        return errors;\n    };\n\n    return (\n        <>\n            <div className={\"logoutContainer withSpace\"}>\n                <NavLink to={`/`}>\n                    <i className=\"fas fa-sign-out-alt\" />\n                </NavLink>\n            </div>\n            <div className={\"formContainer m-auto\"}>\n                <h1>Register</h1>\n                <Formik\n                    initialValues={credentials}\n                    validate={handleValidation}\n                    onSubmit={handleSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <form className={\"form\"} onSubmit={handleSubmit}>\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder={\"email\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                            />\n                            <span className={\"formValidationError\"}>\n                                {touched.email && errors.email}\n                            </span>\n                            <input\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder={\"password\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.password}\n                                autoComplete=\"new-password\"\n                            />\n                            <span className={\"formValidationError\"}>\n                                {touched.password && errors.password}\n                            </span>\n                            <input\n                                type=\"password\"\n                                name=\"passwordRepeat\"\n                                placeholder={\"repeat password\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.passwordRepeat}\n                                autoComplete=\"new-password\"\n                            />\n                            <span className={\"formValidationError\"}>\n                                {touched.passwordRepeat &&\n                                    errors.passwordRepeat}\n                            </span>\n                            <button\n                                className={\"formSubmitButton\"}\n                                type=\"submit\"\n                                disabled={isSubmitting}\n                            >\n                                Sign up\n                            </button>\n                        </form>\n                    )}\n                </Formik>\n            </div>\n        </>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}