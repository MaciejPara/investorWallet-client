{"version":3,"sources":["components/loader/index.js","img/loader.gif","serviceWorker.js","redux/actions.js","redux/auth/reducer.js","redux/reducers.js","redux/auth/saga.js","redux/sagas.js","redux/store.js","index.js"],"names":["Loader","className","src","loaderGif","alt","module","exports","Boolean","window","location","hostname","match","LOGIN_USER","INIT_STATE","user","localStorage","getItem","error","basePath","reducers","combineReducers","authUser","state","action","type","loading","rootSaga","all","getState","authSagas","sagaMiddleware","createSagaMiddleware","middlewares","App","React","lazy","ReactDOM","render","StrictMode","store","initialState","createStore","compose","applyMiddleware","run","sagas","configureStore","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2FAAA,qCAKeA,IAFA,kBAAM,yBAAKC,UAAW,SAAUC,IAAKC,IAAWC,IAAI,a,mBCHnEC,EAAOC,QAAU,IAA0B,oC,0ICYvBC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,mCCjBCC,EAAa,aCCpBC,EAAa,CACfC,KAAMC,aAAaC,QAAQ,wBAC3BC,MAAO,GAGPC,SAAU,ICCCC,EAJEC,YAAgB,CAC7BC,SDKW,WAAiC,IAAhCC,EAA+B,uDAAvBT,EAAYU,EAAW,uCAC3C,OAAQA,EAAOC,MACX,KAAKZ,EACD,OAAO,2BAAKU,GAAZ,IAAmBG,SAAS,EAAMR,MAAO,KAC7C,QACI,OAAO,eAAKK,O,mCEbCI,GAAV,SAAUA,IAAV,iEACX,OADW,SACLC,YAAI,IADC,uC,eCCUD,GAAV,SAAUA,EAASE,GAAnB,iEACX,OADW,SACLD,YAAI,CAACE,MADA,uCCEf,IAAMC,EAAiBC,cAEjBC,EAAc,CAACF,G,YCCfG,EAAMC,IAAMC,MAAK,kBAAM,sDAE7BC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUC,MDHX,SAAwBC,GAC3B,IAAMD,EAAQE,YACVtB,EACAqB,EACAE,YAAQC,IAAe,WAAf,EAAmBX,KAY/B,OATAF,EAAec,IAAIC,GASZN,ECbcO,IACb,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAChB,kBAACd,EAAD,SAIZe,SAASC,eAAe,SPkHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACvC,GACJwC,QAAQxC,MAAMA,EAAMyC,c","file":"static/js/main.42da7817.chunk.js","sourcesContent":["import loaderGif from \"../../img/loader.gif\";\nimport React from \"react\";\n\nconst Loader = () => <img className={\"loader\"} src={loaderGif} alt=\"loader\" />;\n\nexport default Loader;\n","module.exports = __webpack_public_path__ + \"static/media/loader.f6f2de36.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","/* AUTH */\nexport const LOGIN_USER = \"LOGIN_USER\";\n\nexport * from \"./auth/actions\";\n","import { LOGIN_USER } from \"../actions\";\n\nconst INIT_STATE = {\n    user: localStorage.getItem(\"investorWalletUserId\"),\n    error: \"\",\n    // basePath:\n    //     process.env.NODE_ENV === \"development\" ? \"\" : \"/investorWallet-client\",\n    basePath: \"\",\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case LOGIN_USER:\n            return { ...state, loading: true, error: \"\" };\n        default:\n            return { ...state };\n    }\n};\n","import { combineReducers } from \"redux\";\n\nimport authUser from \"./auth/reducer\";\n\nconst reducers = combineReducers({\n    authUser,\n});\n\nexport default reducers;\n","import { all } from \"redux-saga/effects\";\n\nexport default function* rootSaga() {\n    yield all([]);\n}\n","import { all } from \"redux-saga/effects\";\nimport authSagas from \"./auth/saga\";\n\nexport default function* rootSaga(getState) {\n    yield all([authSagas()]);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n    const store = createStore(\n        reducers,\n        initialState,\n        compose(applyMiddleware(...middlewares))\n    );\n\n    sagaMiddleware.run(sagas);\n\n    if (module.hot) {\n        module.hot.accept(\"./reducers\", () => {\n            const nextRootReducer = require(\"./reducers\");\n            store.replaceReducer(nextRootReducer);\n        });\n    }\n\n    return store;\n}\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Loader from \"./components/loader\";\nimport { configureStore } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nconst App = React.lazy(() => import(/* webpackChunkName: \"App\" */ \"./App\"));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureStore()}>\n            <Suspense fallback={<Loader />}>\n                <App />\n            </Suspense>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}