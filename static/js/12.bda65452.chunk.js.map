{"version":3,"sources":["views/login/index.js"],"names":["Views","match","url","history","useState","email","password","credentials","dispatch","useDispatch","user","useStore","getState","authUser","useEffect","push","handleSubmit","values","a","FetchClient","post","body","result","localStorage","setItem","JSON","stringify","type","LOGIN_USER","payload","store","addNotification","title","message","toString","insert","container","animationIn","animationOut","dismiss","duration","onScreen","console","error","className","to","initialValues","validate","errors","test","onSubmit","touched","handleChange","handleBlur","isSubmitting","name","placeholder","onChange","onBlur","value","disabled"],"mappings":"sMAyIeA,UAjID,SAAC,GAAgC,EAA9BC,MAASC,IAAsB,IAAfC,EAAc,EAAdA,QAAc,EACrBC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAA/CC,EADoC,oBAErCC,EAAWC,cAGDC,EACZC,cAAWC,WADXC,SAAYH,KAGhBI,qBAAU,WACFJ,GAAQA,EAAKL,OACbF,EAAQY,KAAR,WAIR,IAAMC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEQC,IAAYC,KAAK,CAClClB,IAAK,UACLmB,KAAMJ,IAJG,QAEPK,EAFO,UAQTC,aAAaC,QACT,qBACAC,KAAKC,UAAUJ,IAGnBd,EAAS,CACLmB,KAAMC,aACNC,QAAS,CAAEnB,KAAMY,KAErBnB,EAAQY,KAAR,SAjBS,gDAoBbe,QAAMC,gBAAgB,CAClBC,MAAO,UACPC,QAAS,KAAEC,WACXP,KAAM,SACNQ,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,KAGlBC,QAAQC,MAAR,MAjCa,yDAAH,sDAsDlB,OACI,oCACI,yBAAKC,UAAW,6BACZ,kBAAC,IAAD,CAASC,GAAE,KACP,uBAAGD,UAAU,0BAGrB,yBAAKA,UAAW,wBACZ,qCACA,kBAAC,IAAD,CACIE,cAAevC,EACfwC,SA5BS,SAAC9B,GACtB,IAAM+B,EAAS,GAaf,OAXK/B,EAAOX,WACR0C,EAAO1C,SAAW,YAGjBW,EAAOZ,MAGP,2CAA2C4C,KAAKhC,EAAOZ,SAExD2C,EAAO3C,MAAQ,yBAJf2C,EAAO3C,MAAQ,WAMZ2C,GAeKE,SAAUlC,IAET,gBACGC,EADH,EACGA,OACA+B,EAFH,EAEGA,OACAG,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACArC,EANH,EAMGA,aACAsC,EAPH,EAOGA,aAPH,OASG,0BAAMV,UAAW,OAAQM,SAAUlC,GAC/B,2BACIW,KAAK,QACL4B,KAAK,QACLC,YAAa,QACbC,SAAUL,EACVM,OAAQL,EACRM,MAAO1C,EAAOZ,QAElB,0BAAMuC,UAAW,uBACZI,EAAO3C,OAAS8C,EAAQ9C,OAAS2C,EAAO3C,OAE7C,2BACIsB,KAAK,WACL4B,KAAK,WACLC,YAAa,WACbC,SAAUL,EACVM,OAAQL,EACRM,MAAO1C,EAAOX,WAElB,0BAAMsC,UAAW,uBACZO,EAAQ7C,UAAY0C,EAAO1C,UAEhC,4BACIsC,UAAW,mBACXjB,KAAK,SACLiC,SAAUN,GAHd","file":"static/js/12.bda65452.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport { LOGIN_USER } from \"../../redux/actions\";\nimport { store } from \"react-notifications-component\";\nimport FetchClient from \"../../utils/FetchClient\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Views = ({ match: { url }, history }) => {\n    const [credentials] = useState({ email: \"\", password: \"\" });\n    const dispatch = useDispatch();\n\n    const {\n        authUser: { user },\n    } = useStore().getState();\n\n    useEffect(() => {\n        if (user && user.email) {\n            history.push(`/app`);\n        }\n    });\n\n    const handleSubmit = async (values) => {\n        try {\n            const result = await FetchClient.post({\n                url: \"/signin\",\n                body: values,\n            });\n\n            if (result) {\n                localStorage.setItem(\n                    \"investorWalletUser\",\n                    JSON.stringify(result)\n                );\n\n                dispatch({\n                    type: LOGIN_USER,\n                    payload: { user: result },\n                });\n                history.push(`/app`);\n            }\n        } catch (e) {\n            store.addNotification({\n                title: \"Failure\",\n                message: e.toString(),\n                type: \"danger\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                    duration: 3000,\n                    onScreen: true,\n                },\n            });\n            console.error(e);\n        }\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        if (!values.password) {\n            errors.password = \"Required\";\n        }\n\n        if (!values.email) {\n            errors.email = \"Required\";\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = \"Invalid email address\";\n        }\n        return errors;\n    };\n\n    return (\n        <>\n            <div className={\"logoutContainer withSpace\"}>\n                <NavLink to={`/`}>\n                    <i className=\"fas fa-sign-out-alt\" />\n                </NavLink>\n            </div>\n            <div className={\"formContainer m-auto\"}>\n                <h1>Login</h1>\n                <Formik\n                    initialValues={credentials}\n                    validate={handleValidation}\n                    onSubmit={handleSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <form className={\"form\"} onSubmit={handleSubmit}>\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder={\"email\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                            />\n                            <span className={\"formValidationError\"}>\n                                {errors.email && touched.email && errors.email}\n                            </span>\n                            <input\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder={\"password\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.password}\n                            />\n                            <span className={\"formValidationError\"}>\n                                {touched.password && errors.password}\n                            </span>\n                            <button\n                                className={\"formSubmitButton\"}\n                                type=\"submit\"\n                                disabled={isSubmitting}\n                            >\n                                Sign in\n                            </button>\n                        </form>\n                    )}\n                </Formik>\n            </div>\n        </>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}