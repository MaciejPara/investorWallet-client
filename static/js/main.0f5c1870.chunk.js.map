{"version":3,"sources":["utils/FetchClient.js","utils/Messages.js","redux/collections/actions.js","components/loader/index.js","redux/settings/actions.js","redux/auth/actions.js","img/loader.gif","serviceWorker.js","redux/auth/reducer.js","utils/Model.js","redux/collections/index.js","redux/collections/reducer.js","redux/menu/reducer.js","utils/UserSettings.js","redux/settings/reducer.js","redux/reducers.js","redux/loader/reducer.js","redux/auth/saga.js","redux/collections/saga.js","redux/sagas.js","redux/store.js","index.js","redux/actions.js"],"names":["FetchClient","apiUrl","_url","_config","headers","credentials","url","fetch","this","method","response","json","body","JSON","stringify","status","_showUnauthorized","_showInternalServerError","_showEmailAlreadyExists","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","GET_CATEGORY_DATA","SET_DATA","SET_INIT_FLAG","Loader","className","src","loaderGif","alt","SET_SETTINGS","module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","INIT_STATE","user","parse","localStorage","getItem","init","Model","name","plural","sort","categoryName","_name","_plural","_fetchPending","_data","_sort","_categoryName","_shouldRefresh","_baseUrl","base","createdAt","currencies","model","data","crypto","metals","categories","initFlag","collections","menuItems","label","path","items","current","pathname","currentPath","forEach","indexOf","findCurrentPath","UserSettings","props","_options","id","setItem","update","favourites","options","settings","userSettingsAdapter","UserSettingsAdapter","baseOptions","value","reducers","combineReducers","authUser","payload","LOGIN_USER","LOGOUT_USER","undefined","SET_USER_FAVOURITES","SET_INIT","SET_USER","category","menu","action","MENU_CHANGE","loader","LOADER","watchUserGet","rootSaga","takeEvery","GET_USER_DATA","get","_id","put","all","watchInitializeCollections","result","rates","fork","getState","authSagas","collectionsSagas","sagaMiddleware","createSagaMiddleware","middlewares","App","React","lazy","ReactDOM","render","StrictMode","initialState","createStore","compose","applyMiddleware","run","sagas","configureStore","fallback","document","getElementById","URL","process","href","origin","addEventListener","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0f5c1870.chunk.js","sourcesContent":["import Messages from \"./Messages\";\n\nclass FetchClient extends Messages {\n    constructor({ apiUrl }) {\n        super();\n\n        this._url = apiUrl;\n        this._config = {\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Access-Control-Allow-Origin\": true,\n                \"Access-Control-Allow-Credentials\": true,\n            },\n            credentials: \"include\",\n        };\n    }\n\n    async get({ url }) {\n        const response = await fetch(`${this._url}${url}`, {\n            ...this._config,\n            method: \"get\",\n        });\n        return await response.json();\n    }\n\n    async post({ url, body }) {\n        const response = await fetch(`${this._url}${url}`, {\n            ...this._config,\n            method: \"post\",\n            body: JSON.stringify(body),\n        });\n\n        if (response?.status === 401) return this._showUnauthorized();\n        if (response?.status === 500) return this._showInternalServerError();\n        if (response?.status === 409) return this._showEmailAlreadyExists();\n\n        return await response.json();\n    }\n\n    async update({ url, body }) {\n        const response = await fetch(`${this._url}${url}`, {\n            ...this._config,\n            method: \"PATCH\",\n            body: JSON.stringify(body),\n        });\n\n        if (response?.status === 401) return this._showUnauthorized();\n        if (response?.status === 500) return this._showInternalServerError();\n\n        return await response.json();\n    }\n\n    async delete({ url }) {\n        const response = await fetch(`${this._url}${url}`, {\n            ...this._config,\n            method: \"delete\",\n        });\n        return await response.json();\n    }\n}\n\nexport default new FetchClient({\n    apiUrl:\n        process.env.NODE_ENV === \"development\"\n            ? \"http://localhost:8080\"\n            : \"https://investor-wallet.herokuapp.com\",\n});\n","import { store } from \"react-notifications-component\";\n\nclass Messages {\n    _showUnauthorized() {\n        store.addNotification({\n            title: \"Failure\",\n            message: \"Unauthorized - check your e-mail or password.\",\n            type: \"danger\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n                duration: 4000,\n                onScreen: true,\n            },\n        });\n    }\n\n    _showInternalServerError() {\n        store.addNotification({\n            title: \"Failure\",\n            message: \"Internal server error. Contact with admin.\",\n            type: \"danger\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n                duration: 4000,\n                onScreen: true,\n            },\n        });\n    }\n\n    _showEmailAlreadyExists() {\n        store.addNotification({\n            title: \"Failure\",\n            message: \"Email already exists.\",\n            type: \"danger\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n                duration: 4000,\n                onScreen: true,\n            },\n        });\n    }\n}\n\nexport default Messages;\n","export const GET_CATEGORY_DATA = \"GET_CATEGORY_DATA\";\nexport const SET_DATA = \"SET_DATA\";\nexport const SET_INIT_FLAG = \"SET_INIT_FLAG\";\n","import loaderGif from \"../../img/loader.gif\";\nimport React from \"react\";\n\nconst Loader = () => <img className={\"loader\"} src={loaderGif} alt=\"loader\" />;\n\nexport default Loader;\n","export const SET_SETTINGS = \"SET_SETTINGS\";\n","import { LOGIN_USER } from \"../actions\";\n\nexport const loginUser = (user, history) => ({\n    type: LOGIN_USER,\n    payload: { user, history },\n});\n","module.exports = __webpack_public_path__ + \"static/media/loader.f6f2de36.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import {\n    LOGIN_USER,\n    LOGOUT_USER,\n    SET_USER_FAVOURITES,\n    SET_INIT,\n    SET_USER,\n} from \"../actions\";\n\nconst INIT_STATE = {\n    user: JSON.parse(localStorage.getItem(\"investorWalletUser\") || \"{}\"),\n    init: true,\n};\n\nexport default (state = INIT_STATE, { payload, type }) => {\n    switch (type) {\n        case LOGIN_USER:\n            return {\n                ...state,\n                user: payload.user,\n            };\n        case LOGOUT_USER:\n            return {\n                ...state,\n                user: undefined,\n            };\n        case SET_USER_FAVOURITES:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    favourites: payload,\n                },\n            };\n        case SET_INIT:\n            return {\n                ...state,\n                init: payload,\n            };\n        case SET_USER:\n            return {\n                ...state,\n                user: payload,\n            };\n        default:\n            return { ...state };\n    }\n};\n","class Model {\n    constructor({ name, plural, sort, categoryName }) {\n        this._name = name;\n        this._plural = plural;\n        this._fetchPending = false;\n        this._data = [];\n        this._sort = sort;\n        this._categoryName = categoryName;\n        this._shouldRefresh = true;\n        this._baseUrl = `/${this._plural}`;\n    }\n\n    setRefresh(state = false) {\n        this._shouldRefresh = state;\n    }\n\n    shouldRefresh() {\n        return this._shouldRefresh;\n    }\n\n    getAllUrl(base) {\n        return `${this._baseUrl}?filter=${JSON.stringify({\n            base: base,\n        })}&sort=${JSON.stringify({ createdAt: \"desc\" })}&limit=1`;\n    }\n\n    getCategoryName() {\n        return this._categoryName;\n    }\n\n    getName() {\n        return this._name;\n    }\n\n    getPlural() {\n        return this._plural;\n    }\n}\n\nexport default Model;\n","import Model from \"../../utils/Model\";\n\nexport default {\n    currencies: {\n        model: new Model({\n            name: \"currencyRate\",\n            plural: \"currencyRates\",\n            categoryName: \"currencies\",\n        }),\n        data: [],\n    },\n    crypto: {\n        model: new Model({\n            name: \"cryptoRate\",\n            plural: \"cryptoRates\",\n            categoryName: \"crypto\",\n        }),\n        data: [],\n    },\n    metals: {\n        model: new Model({\n            name: \"metalRate\",\n            plural: \"metalRates\",\n            categoryName: \"metals\",\n        }),\n        data: [],\n    },\n};\n","import { SET_DATA, SET_INIT_FLAG } from \"../actions\";\nimport collections from \"./index\";\n\nconst INIT_STATE = {\n    categories: [\"currencies\", \"crypto\", \"metals\"],\n    initFlag: false,\n    ...collections,\n};\n\nexport default (state = INIT_STATE, { type, payload }) => {\n    switch (type) {\n        case SET_DATA: {\n            return {\n                ...state,\n                [payload.category]: {\n                    ...state[payload.category],\n                    data: payload.data,\n                },\n            };\n        }\n        case SET_INIT_FLAG: {\n            return {\n                ...state,\n                initFlag: !state.initFlag,\n            };\n        }\n        default:\n            return { ...state };\n    }\n};\n","import { MENU_CHANGE } from \"../actions\";\n\nconst menuItems = [\n    {\n        label: \"Home\",\n        name: \"home\",\n        path: \"\",\n    },\n    {\n        label: \"Currencies\",\n        name: \"currencies\",\n        path: \"/currencies\",\n    },\n    {\n        label: \"Crypto\",\n        name: \"crypto\",\n        path: \"/crypto\",\n    },\n    {\n        label: \"Metals\",\n        name: \"metals\",\n        path: \"/metals\",\n    },\n];\n\nconst findCurrentPath = () => {\n    const { pathname } = window.location;\n\n    let currentPath = \"home\";\n\n    menuItems.forEach(({ path, name }) => {\n        if (pathname.indexOf(path) > -1) currentPath = name;\n    });\n\n    return currentPath;\n};\n\nconst INIT_STATE = {\n    items: menuItems,\n    current: findCurrentPath(),\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case MENU_CHANGE: {\n            return { ...state, current: action.payload };\n        }\n\n        default:\n            return { ...state };\n    }\n};\n","import FetchClient from \"./FetchClient\";\n\nclass UserSettings {\n    constructor(props) {\n        this._options = props || {};\n        this._baseUrl = \"/user\";\n    }\n    async changeBase(base) {\n        const { id } = this._options;\n\n        localStorage.setItem(\n            \"investorWalletUserSettings\",\n            JSON.stringify({ base })\n        );\n\n        return await FetchClient.update({\n            url: `${this._baseUrl}/${id}`,\n            body: { \"settings.base\": base },\n        });\n    }\n    async changeFavourites(favourites) {\n        const { id } = this._options;\n\n        return await FetchClient.update({\n            url: `${this._baseUrl}/${id}`,\n            body: { favourites },\n        });\n    }\n\n    setOptions(options) {\n        this._options = { ...this._options, ...options };\n    }\n}\n\nexport default UserSettings;\n","import { SET_SETTINGS } from \"../actions\";\nimport UserSettingsAdapter from \"../../utils/UserSettings\";\n\nconst settings = {\n    ...JSON.parse(localStorage.getItem(\"investorWalletUserSettings\") || \"{}\"),\n};\n\nconst INIT_STATE = {\n    userSettingsAdapter: new UserSettingsAdapter({\n        ...settings,\n        ...JSON.parse(localStorage.getItem(\"investorWalletUser\") || \"{}\"),\n    }),\n    baseOptions: [\n        { value: \"USD\", label: \"USD\" },\n        { value: \"PLN\", label: \"PLN\" },\n    ],\n    ...settings,\n};\n\nexport default (state = INIT_STATE, { type, payload }) => {\n    switch (type) {\n        case SET_SETTINGS: {\n            return {\n                ...state,\n                ...payload,\n            };\n        }\n        default:\n            return { ...state };\n    }\n};\n","import { combineReducers } from \"redux\";\n\nimport authUser from \"./auth/reducer\";\nimport collections from \"./collections/reducer\";\nimport menu from \"./menu/reducer\";\nimport settings from \"./settings/reducer\";\nimport loader from \"./loader/reducer\";\n\nconst reducers = combineReducers({\n    authUser,\n    collections,\n    menu,\n    settings,\n    loader,\n});\n\nexport default reducers;\n","import { LOADER } from \"../actions\";\n\nconst INIT_STATE = false;\n\nexport default (state = INIT_STATE, { type }) => {\n    switch (type) {\n        case LOADER: {\n            return !state;\n        }\n        default:\n            return state;\n    }\n};\n","import { all, put, takeEvery } from \"redux-saga/effects\";\nimport FetchClient from \"../../utils/FetchClient\";\nimport { GET_USER_DATA, SET_USER } from \"../actions\";\n\nexport function* watchUserGet() {\n    yield takeEvery(GET_USER_DATA, init);\n}\n\nexport function* init({ payload: { url } }) {\n    try {\n        const user = yield FetchClient.get({ url });\n\n        user.id = user._id;\n        delete user._id;\n\n        yield put({\n            type: SET_USER,\n            payload: (user && user[0]) || null,\n        });\n    } catch (e) {\n        console.error(e);\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([watchUserGet()]);\n}\n","import { call, put, all, fork, takeEvery } from \"redux-saga/effects\";\nimport { GET_CATEGORY_DATA, SET_DATA } from \"./actions\";\nimport FetchClient from \"../../utils/FetchClient\";\n\nexport function* watchInitializeCollections() {\n    yield takeEvery(GET_CATEGORY_DATA, init);\n}\n\nexport function* init({ payload: { url, category } }) {\n    const result = yield FetchClient.get({ url });\n\n    yield put({\n        type: SET_DATA,\n        payload: {\n            category,\n            data: result[0]?.rates, //@todo optimize !!!\n        },\n    });\n}\n\nexport default function* rootSaga() {\n    yield all([fork(watchInitializeCollections)]);\n}\n","import { all } from \"redux-saga/effects\";\nimport authSagas from \"./auth/saga\";\nimport collectionsSagas from \"./collections/saga\";\n\nexport default function* rootSaga(getState) {\n    yield all([authSagas(), collectionsSagas()]);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n    const store = createStore(\n        reducers,\n        initialState,\n        compose(applyMiddleware(...middlewares))\n    );\n\n    sagaMiddleware.run(sagas);\n\n    if (module.hot) {\n        module.hot.accept(\"./reducers\", () => {\n            const nextRootReducer = require(\"./reducers\");\n            store.replaceReducer(nextRootReducer);\n        });\n    }\n\n    return store;\n}\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Loader from \"./components/loader\";\nimport { configureStore } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nconst App = React.lazy(() => import(\"./App\"));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureStore()}>\n            <Suspense fallback={<Loader />}>\n                <App />\n            </Suspense>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","/* AUTH */\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const SET_INIT = \"SET_INIT\";\nexport const SET_USER_FAVOURITES = \"SET_USER_FAVOURITES\";\nexport const GET_USER_DATA = \"GET_USER_DATA\";\nexport const SET_USER = \"SET_USER\";\n\n/* MENU */\nexport const MENU_CHANGE = \"MENU_CHANGE\";\n\n/* LOADER */\nexport const LOADER = \"LOADER\";\n\nexport * from \"./auth/actions\";\nexport * from \"./collections/actions\";\nexport * from \"./settings/actions\";\nexport * from \"./menu/actions\";\n"],"sourceRoot":""}