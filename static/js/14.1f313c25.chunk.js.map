{"version":3,"sources":["views/login/index.js"],"names":["Views","match","url","history","useState","email","password","credentials","dispatch","useDispatch","user","useStore","getState","authUser","useEffect","push","handleSubmit","values","a","fetch","method","body","JSON","stringify","headers","response","json","result","localStorage","setItem","type","LOGIN_USER","payload","store","addNotification","title","message","insert","container","animationIn","animationOut","dismiss","duration","onScreen","toString","console","error","className","initialValues","validate","errors","test","onSubmit","touched","handleChange","handleBlur","isSubmitting","name","placeholder","onChange","onBlur","value","disabled"],"mappings":"uLA0JeA,UA/ID,SAAC,GAAgC,EAA9BC,MAASC,IAAsB,IAAfC,EAAc,EAAdA,QAAc,EACrBC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAA/CC,EADoC,oBAErCC,EAAWC,cAGDC,EACZC,cAAWC,WADXC,SAAYH,KAGhBI,qBAAU,WACFJ,GAAQA,EAAKL,OACbF,EAAQY,KAAR,WAIR,IAAMC,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAEUC,MAAM,GAAD,OAnB9B,wCAmB8B,WAAqB,CAC7CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACL,eAAgB,mBAChB,+BAA+B,EAC/B,oCAAoC,GAExCjB,YAAa,YAVJ,cAEPkB,EAFO,gBAYQA,EAASC,OAZjB,QAYPC,EAZO,SAeTC,aAAaC,QACT,qBACAP,KAAKC,UAAUI,IAGnBnB,EAAS,CACLsB,KAAMC,IACNC,QAAS,CAAEtB,KAAMiB,KAErBxB,EAAQY,KAAR,SAEAkB,QAAMC,gBAAgB,CAClBC,MAAO,UACPC,QAAS,eACTN,KAAM,SACNO,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,KApCT,kDAyCbV,QAAMC,gBAAgB,CAClBC,MAAO,UACPC,QAAS,KAAEQ,WACXd,KAAM,SACNO,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,KAGlBE,QAAQC,MAAR,MAtDa,0DAAH,sDA2ElB,OACI,yBAAKC,UAAW,wBACZ,0CACA,kBAAC,IAAD,CACIC,cAAezC,EACf0C,SAtBa,SAAChC,GACtB,IAAMiC,EAAS,GAaf,OAXKjC,EAAOX,WACR4C,EAAO5C,SAAW,YAGjBW,EAAOZ,MAGP,2CAA2C8C,KAAKlC,EAAOZ,SAExD6C,EAAO7C,MAAQ,yBAJf6C,EAAO7C,MAAQ,WAMZ6C,GASCE,SAAUpC,IAET,gBACGC,EADH,EACGA,OACAiC,EAFH,EAEGA,OACAG,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACAvC,EANH,EAMGA,aACAwC,EAPH,EAOGA,aAPH,OASG,0BAAMT,UAAW,OAAQK,SAAUpC,GAC/B,2BACIc,KAAK,QACL2B,KAAK,QACLC,YAAa,QACbC,SAAUL,EACVM,OAAQL,EACRM,MAAO5C,EAAOZ,QAElB,0BAAM0C,UAAW,uBACZG,EAAO7C,OAASgD,EAAQhD,OAAS6C,EAAO7C,OAE7C,2BACIyB,KAAK,WACL2B,KAAK,WACLC,YAAa,WACbC,SAAUL,EACVM,OAAQL,EACRM,MAAO5C,EAAOX,WAElB,0BAAMyC,UAAW,uBACZG,EAAO7C,OAASgD,EAAQhD,OAAS6C,EAAO7C,OAE7C,4BACI0C,UAAW,mBACXjB,KAAK,SACLgC,SAAUN,GAHd","file":"static/js/14.1f313c25.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport { LOGIN_USER } from \"../../redux/actions\";\nimport { store } from \"react-notifications-component\";\n\nconst DOMAIN =\n    process.env.NODE_ENV === \"production\"\n        ? \"https://investor-wallet.herokuapp.com\"\n        : \"http://localhost:8080\";\n\nconst Views = ({ match: { url }, history }) => {\n    const [credentials] = useState({ email: \"\", password: \"\" });\n    const dispatch = useDispatch();\n\n    const {\n        authUser: { user },\n    } = useStore().getState();\n\n    useEffect(() => {\n        if (user && user.email) {\n            history.push(`/app`);\n        }\n    });\n\n    const handleSubmit = async (values) => {\n        try {\n            const response = await fetch(`${DOMAIN}/signin`, {\n                method: \"post\",\n                body: JSON.stringify(values),\n                headers: {\n                    \"content-type\": \"application/json\",\n                    \"Access-Control-Allow-Origin\": true,\n                    \"Access-Control-Allow-Credentials\": true,\n                },\n                credentials: \"include\",\n            });\n            const result = await response.json();\n\n            if (result) {\n                localStorage.setItem(\n                    \"investorWalletUser\",\n                    JSON.stringify(result)\n                );\n\n                dispatch({\n                    type: LOGIN_USER,\n                    payload: { user: result },\n                });\n                history.push(`/app`);\n            } else {\n                store.addNotification({\n                    title: \"Failure\",\n                    message: \"Login failed\",\n                    type: \"danger\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    animationIn: [\"animated\", \"fadeIn\"],\n                    animationOut: [\"animated\", \"fadeOut\"],\n                    dismiss: {\n                        duration: 3000,\n                        onScreen: true,\n                    },\n                });\n            }\n        } catch (e) {\n            store.addNotification({\n                title: \"Failure\",\n                message: e.toString(),\n                type: \"danger\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                    duration: 3000,\n                    onScreen: true,\n                },\n            });\n            console.error(e);\n        }\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        if (!values.password) {\n            errors.password = \"Required\";\n        }\n\n        if (!values.email) {\n            errors.email = \"Required\";\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = \"Invalid email address\";\n        }\n        return errors;\n    };\n\n    return (\n        <div className={\"formContainer m-auto\"}>\n            <h1>Login user</h1>\n            <Formik\n                initialValues={credentials}\n                validate={handleValidation}\n                onSubmit={handleSubmit}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                }) => (\n                    <form className={\"form\"} onSubmit={handleSubmit}>\n                        <input\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder={\"email\"}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                        />\n                        <span className={\"formValidationError\"}>\n                            {errors.email && touched.email && errors.email}\n                        </span>\n                        <input\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder={\"password\"}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.password}\n                        />\n                        <span className={\"formValidationError\"}>\n                            {errors.email && touched.email && errors.email}\n                        </span>\n                        <button\n                            className={\"formSubmitButton\"}\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                        >\n                            Submit\n                        </button>\n                    </form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}