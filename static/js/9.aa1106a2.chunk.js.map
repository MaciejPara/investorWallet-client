{"version":3,"sources":["views/login/index.js"],"names":["Views","match","url","history","useState","email","password","credentials","dispatch","useDispatch","useStore","getState","authUser","user","basePath","useEffect","console","log","push","handleSubmit","values","a","setSubmitting","fetch","method","body","JSON","stringify","headers","response","json","result","localStorage","setItem","type","LOGIN_USER","payload","error","className","initialValues","validate","errors","test","onSubmit","touched","handleChange","handleBlur","isSubmitting","name","placeholder","onChange","onBlur","value","disabled"],"mappings":"8KAqHeA,UAhHD,SAAC,GAAgC,EAA9BC,MAASC,IAAsB,IAAfC,EAAc,EAAdA,QAAc,EACrBC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAA/CC,EADoC,oBAErCC,EAAWC,cAF0B,EAMvCC,cAAWC,WADXC,SAAYC,EAL2B,EAK3BA,KAAMC,EALqB,EAKrBA,SAGtBC,qBAAU,WACNC,QAAQC,IAAIH,GACRD,EAAKR,OAAOF,EAAQe,KAAR,UAAgBJ,EAAhB,YAGpB,IAAMK,EAAY,uCAAG,WAAOC,EAAP,sBAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,cAAjB,kBAEUC,MAAS,+BAAkC,CAC9DC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,GACrBQ,QAAS,CACL,eAAgB,mBAChB,+BAA+B,EAC/B,oCAAoC,GAExCrB,YAAa,YAVJ,cAEPsB,EAFO,gBAYQA,EAASC,OAZjB,OAYPC,EAZO,OAcbC,aAAaC,QAAQ,qBAAsBP,KAAKC,UAAUI,IAE1DvB,EAAS,CACL0B,KAAMC,IACNC,QAAS,CAAEvB,KAAMkB,KAGrBT,GAAc,GACdnB,EAAQe,KAAK,8BAtBA,kDAwBbF,QAAQqB,MAAR,MAxBa,0DAAH,wDA6ClB,OACI,yBAAKC,UAAW,wBACZ,0CACA,kBAAC,IAAD,CACIC,cAAehC,EACfiC,SAtBa,SAACpB,GACtB,IAAMqB,EAAS,GAaf,OAXKrB,EAAOd,WACRmC,EAAOnC,SAAW,YAGjBc,EAAOf,MAGP,2CAA2CqC,KAAKtB,EAAOf,SAExDoC,EAAOpC,MAAQ,yBAJfoC,EAAOpC,MAAQ,WAMZoC,GASCE,SAAUxB,IAET,gBACGC,EADH,EACGA,OACAqB,EAFH,EAEGA,OACAG,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACA3B,EANH,EAMGA,aACA4B,EAPH,EAOGA,aAPH,OASG,0BAAMT,UAAW,OAAQK,SAAUxB,GAC/B,2BACIe,KAAK,QACLc,KAAK,QACLC,YAAa,QACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOhC,EAAOf,QAElB,0BAAMiC,UAAW,uBACZG,EAAOpC,OAASuC,EAAQvC,OAASoC,EAAOpC,OAE7C,2BACI6B,KAAK,WACLc,KAAK,WACLC,YAAa,WACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOhC,EAAOd,WAElB,0BAAMgC,UAAW,uBACZG,EAAOpC,OAASuC,EAAQvC,OAASoC,EAAOpC,OAE7C,4BACIiC,UAAW,mBACXJ,KAAK,SACLmB,SAAUN,GAHd","file":"static/js/9.aa1106a2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport { LOGIN_USER } from \"../../redux/actions\";\n\nconst Views = ({ match: { url }, history }) => {\n    const [credentials] = useState({ email: \"\", password: \"\" });\n    const dispatch = useDispatch();\n\n    const {\n        authUser: { user, basePath },\n    } = useStore().getState();\n\n    useEffect(() => {\n        console.log(basePath);\n        if (user.email) history.push(`${basePath}/app`);\n    });\n\n    const handleSubmit = async (values, { setSubmitting }) => {\n        try {\n            const response = await fetch(`${\"http://localhost:8080/signin\"}`, {\n                method: \"post\",\n                body: JSON.stringify(values),\n                headers: {\n                    \"content-type\": \"application/json\",\n                    \"Access-Control-Allow-Origin\": true,\n                    \"Access-Control-Allow-Credentials\": true,\n                },\n                credentials: \"include\",\n            });\n            const result = await response.json();\n\n            localStorage.setItem(\"investorWalletUser\", JSON.stringify(result));\n\n            dispatch({\n                type: LOGIN_USER,\n                payload: { user: result },\n            });\n\n            setSubmitting(false);\n            history.push(\"/investorWallet-client/app\");\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        if (!values.password) {\n            errors.password = \"Required\";\n        }\n\n        if (!values.email) {\n            errors.email = \"Required\";\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = \"Invalid email address\";\n        }\n        return errors;\n    };\n\n    return (\n        <div className={\"formContainer m-auto\"}>\n            <h1>Login user</h1>\n            <Formik\n                initialValues={credentials}\n                validate={handleValidation}\n                onSubmit={handleSubmit}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                }) => (\n                    <form className={\"form\"} onSubmit={handleSubmit}>\n                        <input\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder={\"email\"}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                        />\n                        <span className={\"formValidationError\"}>\n                            {errors.email && touched.email && errors.email}\n                        </span>\n                        <input\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder={\"password\"}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.password}\n                        />\n                        <span className={\"formValidationError\"}>\n                            {errors.email && touched.email && errors.email}\n                        </span>\n                        <button\n                            className={\"formSubmitButton\"}\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                        >\n                            Submit\n                        </button>\n                    </form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}