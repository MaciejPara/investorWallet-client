{"version":3,"sources":["views/app/wallet/index.js"],"names":["WalletComponent","dispatch","useDispatch","useState","transactions","setTransactions","isNewTransaction","setNewTransaction","whatFilter","setWhatFilter","fromFilter","setFromFilter","autocompleteItems","setAutocompleteItems","fromAutocompleteItems","setFromAutocompleteItems","whatAutocomplete","setWhatAutocomplete","fromAutocomplete","setFromAutocomplete","amountOfWallet","setAmountOfWallet","startAmountOfWallet","setStartAmountOfWallet","borderRadius","boxShadow","background","padding","fontSize","position","overflow","maxHeight","autocompleteStyles","useSelector","collections","base","settings","initFlag","type","SET_INIT_FLAG","categories","forEach","item","model","GET_CATEGORY_DATA","payload","url","getAllUrl","category","getCategoryName","whatData","label","value","toLowerCase","rate","fromData","data","el","result","name","push","JSON","stringify","useEffect","currentResult","priceResult","price","currentPrice","parseFloat","toFixed","userId","authUser","user","id","a","FetchClient","get","length","map","getCurrentPrice","_id","currentPricePercentage","calcPercentage","createdAt","moment","toString","format","found","find","what","foundFrom","from","count","handleSubmit","investment","Date","now","post","body","console","log","error","handleInvestmentDelete","delete","filter","getDifferenceClass","walletPercentage","className","onClick","initialValues","validate","values","errors","onSubmit","handleChange","touched","handleBlur","isSubmitting","htmlFor","wrapperStyle","width","menuStyle","getItemValue","items","includes","placeholder","renderItem","onChange","currentTarget","onSelect","val","target","onBlur","disabled","key","alert"],"mappings":"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","file":"static/js/12.3eb05dbf.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport Autocomplete from \"react-autocomplete\";\nimport {\n    GET_CATEGORY_DATA,\n    SET_INIT_FLAG,\n} from \"../../../redux/collections/actions\";\nimport FetchClient from \"../../../utils/FetchClient\";\n\nconst WalletComponent = () => {\n    const dispatch = useDispatch();\n    const [transactions, setTransactions] = useState([]);\n    const [isNewTransaction, setNewTransaction] = useState(true);\n    const [whatFilter, setWhatFilter] = useState(\"\");\n    const [fromFilter, setFromFilter] = useState(\"\");\n    const [autocompleteItems, setAutocompleteItems] = useState([]);\n    const [fromAutocompleteItems, setFromAutocompleteItems] = useState([]);\n    const [whatAutocomplete, setWhatAutocomplete] = useState(\"\");\n    const [fromAutocomplete, setFromAutocomplete] = useState(\"\");\n    const [amountOfWallet, setAmountOfWallet] = useState(0);\n    const [startAmountOfWallet, setStartAmountOfWallet] = useState(0);\n    const [autocompleteStyles, setAutocompleteStyles] = useState({\n        borderRadius: \"3px\",\n        boxShadow: \"0 2px 12px rgba(0, 0, 0, 0.1)\",\n        background: \"rgba(255, 255, 255, 0.9)\",\n        padding: \"2px 0\",\n        fontSize: \"90%\",\n        position: \"fixed\",\n        overflow: \"auto\",\n        maxHeight: \"200px\",\n    });\n\n    useSelector(({ collections, settings: { base } }) => {\n        if (!collections.initFlag) {\n            dispatch({\n                type: SET_INIT_FLAG,\n            });\n\n            collections.categories.forEach((item) => {\n                const model = collections[item]?.model;\n\n                dispatch({\n                    type: GET_CATEGORY_DATA,\n                    payload: {\n                        url: model.getAllUrl(base),\n                        category: model.getCategoryName(),\n                    },\n                });\n            });\n        }\n    });\n\n    useSelector(\n        ({\n            collections: { categories, ...collections },\n            settings: { base },\n        }) => {\n            let whatData = [\n                { label: base, value: base.toLowerCase(), rate: 1 },\n            ];\n            let fromData = [\n                { label: base, value: base.toLowerCase(), rate: 1 },\n            ];\n\n            categories?.forEach((item) => {\n                collections[item].data?.forEach((el) => {\n                    const result = {\n                        label: el.name,\n                        value: el.name.toLowerCase(),\n                        ...el,\n                    };\n\n                    whatData.push(result);\n\n                    if (item === \"currencies\") {\n                        fromData.push(result);\n                    }\n                });\n            });\n\n            if (\n                JSON.stringify(autocompleteItems) !== JSON.stringify(whatData)\n            ) {\n                setAutocompleteItems(whatData);\n            }\n\n            if (\n                JSON.stringify(fromAutocompleteItems) !==\n                JSON.stringify(fromData)\n            ) {\n                setFromAutocompleteItems(fromData);\n            }\n        }\n    );\n\n    useEffect(() => {\n        let currentResult = 0;\n        let priceResult = 0;\n\n        transactions.forEach(({ price, currentPrice }) => {\n            currentResult += parseFloat(currentPrice);\n            priceResult += parseFloat(price);\n        });\n\n        setAmountOfWallet(currentResult.toFixed(2));\n        setStartAmountOfWallet(priceResult.toFixed(2));\n    }, [transactions]);\n\n    const userId = useSelector(({ ...store }) => store.authUser.user.id);\n\n    useEffect(() => {\n        if (userId) {\n            (async () => {\n                const result = await FetchClient.get({\n                    url: `/investments?filter=${JSON.stringify({\n                        userId: userId,\n                    })}`,\n                });\n\n                if (result.length !== transactions.length) {\n                    setTransactions(\n                        result.map((item) => {\n                            const currentPrice = getCurrentPrice(item);\n\n                            return {\n                                ...item,\n                                id: item._id,\n                                currentPrice,\n                                currentPricePercentage: calcPercentage(\n                                    item.price,\n                                    currentPrice\n                                ),\n                                createdAt: moment(\n                                    item.createdAt.toString()\n                                ).format(\"DD.MM.YYYY - HH:mm:ss\"),\n                            };\n                        })\n                    );\n                }\n            })();\n        }\n    }, [transactions, autocompleteItems, userId]);\n\n    const getCurrentPrice = (item) => {\n        const found = autocompleteItems.find(\n            ({ value }) => item.what.toLowerCase() === value\n        );\n        const foundFrom = autocompleteItems.find(\n            ({ value }) => item.from.toLowerCase() === value\n        );\n\n        return ((found?.rate * item.count) / foundFrom?.rate || 0).toFixed(2);\n    };\n\n    const handleAddTransaction = () => {\n        setNewTransaction(true);\n    };\n\n    const handleSubmit = async (data) => {\n        const investment = {\n            id: Date.now(),\n            ...data,\n            currentPrice: getCurrentPrice(data),\n        };\n\n        try {\n            const result = await FetchClient.post({\n                url: \"/investment\",\n                body: {\n                    userId,\n                    ...investment,\n                },\n            });\n\n            console.log(\">>> \", result);\n        } catch (e) {\n            console.error(e);\n        }\n\n        setNewTransaction(false);\n        setTransactions([\n            ...transactions,\n            {\n                ...investment,\n                currentPricePercentage: calcPercentage(\n                    investment.price,\n                    investment.currentPrice\n                ),\n                createdAt: moment(new Date().toString()).format(\n                    \"DD.MM.YYYY - HH:mm:ss\"\n                ),\n            },\n        ]);\n    };\n\n    const filterTransactions = ({ what, from }) => {\n        return (\n            what.toLowerCase().includes(whatFilter) &&\n            from.toLowerCase().includes(fromFilter)\n        );\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        [\"what\", \"count\", \"from\", \"price\"].forEach((item) => {\n            if (!values[item]) {\n                errors[item] = \"Required\";\n            }\n        });\n\n        return errors;\n    };\n\n    const handleInvestmentDelete = async (id) => {\n        try {\n            await FetchClient.delete({\n                url: `/investment/${id}`,\n            });\n        } catch (e) {\n            console.error(e);\n        }\n\n        setTransactions([...transactions.filter(({ id: tId }) => tId !== id)]);\n    };\n\n    const calcPercentage = (price, currentPrice) => {\n        return ((currentPrice / price) * 100 - 100 || 0).toFixed(1);\n    };\n\n    const getDifferenceClass = (price) => {\n        return price > 0 ? \"plus\" : \"minus\";\n    };\n\n    const walletPercentage = calcPercentage(\n        startAmountOfWallet,\n        amountOfWallet\n    );\n\n    return (\n        <div>\n            <h2 className={`sectionTitle`}>\n                Amount in the wallet:{\" \"}\n                <span\n                    className={`difference ${getDifferenceClass(\n                        walletPercentage\n                    )}`}\n                >\n                    {amountOfWallet || 0} | {walletPercentage}%\n                </span>\n            </h2>\n\n            <button\n                className={\"addTransactionButton\"}\n                onClick={handleAddTransaction}\n            >\n                <span>Add investment</span>{\" \"}\n                <i className=\"fa-solid fa-plus addIcon\" />\n            </button>\n            {isNewTransaction && (\n                <div className={\"newTransaction\"}>\n                    <Formik\n                        initialValues={{\n                            what: \"\",\n                            count: \"\",\n                            from: \"\",\n                            price: \"\",\n                        }}\n                        validate={handleValidation}\n                        onSubmit={handleSubmit}\n                    >\n                        {({\n                            values,\n                            errors,\n                            touched,\n                            handleChange,\n                            handleBlur,\n                            handleSubmit,\n                            isSubmitting,\n                        }) => (\n                            <form\n                                className={\"newTransaction-form\"}\n                                onSubmit={handleSubmit}\n                            >\n                                <div className={\"fieldsContainer\"}>\n                                    <div className={`formField ${errors.what}`}>\n                                        <label htmlFor=\"what\">What</label>\n                                        <Autocomplete\n                                            wrapperStyle={{\n                                                width: \"100%\",\n                                            }}\n                                            menuStyle={autocompleteStyles}\n                                            getItemValue={(item) => item.label}\n                                            items={autocompleteItems.filter(\n                                                ({ value }) =>\n                                                    value.includes(\n                                                        whatAutocomplete.toLowerCase()\n                                                    )\n                                            )}\n                                            placeholder={\"What\"}\n                                            renderItem={({ label }) => (\n                                                <div\n                                                    className={\n                                                        \"autocomplete-item\"\n                                                    }\n                                                >\n                                                    {label}\n                                                </div>\n                                            )}\n                                            value={whatAutocomplete}\n                                            onChange={({\n                                                currentTarget: { value },\n                                            }) => {\n                                                setWhatAutocomplete(value);\n                                            }}\n                                            onSelect={(val) => {\n                                                handleChange({\n                                                    target: {\n                                                        name: \"what\",\n                                                        value: val,\n                                                    },\n                                                    currentTarget: {\n                                                        name: \"what\",\n                                                        value: val,\n                                                    },\n                                                });\n                                                setWhatAutocomplete(val);\n                                            }}\n                                        />\n                                    </div>\n                                    <div\n                                        className={`formField ${errors.count}`}\n                                    >\n                                        <label htmlFor=\"count\">Count</label>\n                                        <input\n                                            type=\"number\"\n                                            name=\"count\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.count}\n                                        />\n                                    </div>\n                                    <div className={`formField ${errors.from}`}>\n                                        <label htmlFor=\"from\">From</label>\n                                        <Autocomplete\n                                            wrapperStyle={{\n                                                width: \"100%\",\n                                            }}\n                                            menuStyle={autocompleteStyles}\n                                            getItemValue={(item) => item.label}\n                                            items={fromAutocompleteItems.filter(\n                                                ({ value }) =>\n                                                    value.includes(\n                                                        fromAutocomplete.toLowerCase()\n                                                    )\n                                            )}\n                                            renderItem={({ label }) => (\n                                                <div\n                                                    className={\n                                                        \"autocomplete-item\"\n                                                    }\n                                                >\n                                                    {label}\n                                                </div>\n                                            )}\n                                            value={fromAutocomplete}\n                                            onChange={({\n                                                currentTarget: { value },\n                                            }) => {\n                                                setFromAutocomplete(value);\n                                            }}\n                                            onSelect={(val) => {\n                                                handleChange({\n                                                    target: {\n                                                        name: \"from\",\n                                                        value: val,\n                                                    },\n                                                    currentTarget: {\n                                                        name: \"from\",\n                                                        value: val,\n                                                    },\n                                                });\n                                                setFromAutocomplete(val);\n                                            }}\n                                        />\n                                    </div>\n                                    <div\n                                        className={`formField ${errors.price}`}\n                                    >\n                                        <label htmlFor=\"price\">Price</label>\n                                        <input\n                                            type=\"number\"\n                                            name=\"price\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.price}\n                                        />\n                                    </div>\n                                    <div className={\"buttonsContainer\"}>\n                                        <button\n                                            className={\"formButton\"}\n                                            type=\"submit\"\n                                            disabled={isSubmitting}\n                                        >\n                                            Add\n                                        </button>\n                                        <button\n                                            className={\n                                                \"formButton formButton-cancel\"\n                                            }\n                                            type=\"cancel\"\n                                            onClick={() =>\n                                                setNewTransaction(false)\n                                            }\n                                        >\n                                            Cancel\n                                        </button>\n                                    </div>\n                                </div>\n                            </form>\n                        )}\n                    </Formik>\n                </div>\n            )}\n            {transactions.length ? (\n                <h3 className={\"sectionTitle mt-4\"}>Investments:</h3>\n            ) : (\n                \"\"\n            )}\n            <div className={\"transactionContainer tableContainer\"}>\n                {transactions.length ? (\n                    <div>\n                        <div\n                            className={\n                                \"tableHeaderContainer row w-100 m-auto d-flex\"\n                            }\n                        >\n                            <span className={\"tableHeader\"}>When</span>\n                            <span className={\"tableHeader\"}>\n                                <input\n                                    type=\"text\"\n                                    placeholder={\"What 🔍\"}\n                                    value={whatFilter}\n                                    onChange={({ currentTarget: { value } }) =>\n                                        setWhatFilter(value.toLowerCase())\n                                    }\n                                />\n                            </span>\n                            <span className={\"tableHeader\"}>Count</span>\n                            <span className={\"tableHeader\"}>\n                                <input\n                                    type=\"text\"\n                                    placeholder={\"From 🔍\"}\n                                    value={fromFilter}\n                                    onChange={({ currentTarget: { value } }) =>\n                                        setFromFilter(value.toLowerCase())\n                                    }\n                                />\n                            </span>\n                            <span className={\"tableHeader m-auto\"}>Price</span>\n                            <span className={\"tableHeader m-auto\"}>\n                                Current Price\n                            </span>\n                            <span className={\"tableHeader m-auto\"} />\n                        </div>\n                    </div>\n                ) : (\n                    \"\"\n                )}\n                <div className={\"d-flex w-100 m-auto flex-column\"}>\n                    {transactions\n                        .filter(filterTransactions)\n                        .map(\n                            (\n                                {\n                                    id,\n                                    what,\n                                    count,\n                                    from,\n                                    price,\n                                    createdAt,\n                                    currentPrice,\n                                    currentPricePercentage,\n                                },\n                                key\n                            ) => (\n                                <div\n                                    key={key}\n                                    className={\n                                        \"transaction categoryItem row w-100 m-auto d-flex\"\n                                    }\n                                >\n                                    <span className={\"cell date\"}>\n                                        {createdAt}\n                                    </span>\n                                    <span className={\"cell\"}>{what}</span>\n                                    <span className={\"cell\"}>{count}</span>\n                                    <span className={\"cell\"}>{from}</span>\n                                    <span className={\"cell\"}>{price}</span>\n                                    <span\n                                        className={`cell m-auto ${getDifferenceClass(\n                                            currentPricePercentage\n                                        )} currentPrice`}\n                                    >\n                                        <span>{currentPrice} | </span>\n                                        <span className={\"percentage\"}>\n                                            {currentPricePercentage}%\n                                        </span>\n                                    </span>\n                                    <span className={\"cell actions\"}>\n                                        <i\n                                            className=\"far fa-trash-alt\"\n                                            onClick={() =>\n                                                handleInvestmentDelete(id)\n                                            }\n                                        />\n                                        <i\n                                            className=\"fas fa-info-circle ml-4\"\n                                            onClick={() =>\n                                                alert(`details ${id}`)\n                                            }\n                                        />\n                                    </span>\n                                </div>\n                            )\n                        )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default WalletComponent;\n"],"sourceRoot":""}