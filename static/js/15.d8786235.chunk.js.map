{"version":3,"sources":["views/login/index.js"],"names":["Views","match","url","history","message","useState","email","password","credentials","dispatch","useDispatch","useStore","getState","user","authUser","userSettingsAdapter","settings","useEffect","push","store","addNotification","title","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","handleSubmit","values","a","LOADER","FetchClient","post","body","result","localStorage","setItem","JSON","stringify","LOGIN_USER","payload","MENU_CHANGE","setOptions","SET_SETTINGS","toString","console","error","className","to","initialValues","validate","errors","test","onSubmit","touched","handleChange","handleBlur","isSubmitting","name","placeholder","onChange","onBlur","value","disabled"],"mappings":"0MAwLeA,UA3KD,SAAC,GAAyC,EAAvCC,MAASC,IAA+B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACtC,EAAsBC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAA/CC,EAAP,oBACMC,EAAWC,cAEjB,EAGIC,cAAWC,WAFCC,EADhB,EACIC,SAAYD,KACAE,EAFhB,EAEIC,SAAYD,oBAGhBE,qBAAU,WACFJ,GAAQA,EAAKP,OACbH,EAAQe,KAAR,WAIRD,qBAAU,WACFb,GACAe,QAAMC,gBAAgB,CAClBC,MAAO,OACPjB,QAASA,EACTkB,KAAM,OACNC,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,OAIvB,CAACzB,IAEJ,IAAM0B,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEAEbvB,EAAS,CAAEa,KAAMW,MAFJ,SAGQC,IAAYC,KAAK,CAClCjC,IAAK,UACLkC,KAAML,IALG,OAGPM,EAHO,OAQb5B,EAAS,CAAEa,KAAMW,MAEbI,IACAC,aAAaC,QACT,qBACAC,KAAKC,UAAUJ,IAGnB5B,EAAS,CACLa,KAAMoB,IACNC,QAAS,CAAE9B,KAAMwB,KAGrB5B,EAAS,CACLa,KAAMsB,IACND,QAAS,SAGb5B,EAAoB8B,WAAWR,GAE3BA,EAAOrB,WACPsB,aAAaC,QACT,6BACAC,KAAKC,UAAUJ,EAAOrB,WAG1BP,EAAS,CACLa,KAAMwB,IACNH,QAAQ,eAAMN,EAAOrB,aAI7Bb,EAAQe,KAAR,SAxCS,gDA2CbC,QAAMC,gBAAgB,CAClBC,MAAO,UACPjB,QAAS,KAAE2C,WACXzB,KAAM,SACNC,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,KAGlBmB,QAAQC,MAAR,MAxDa,yDAAH,sDA6ElB,OACI,qCACI,qBAAKC,UAAW,4BAAhB,SACI,cAAC,IAAD,CAASC,GAAE,IAAX,SACI,mBAAGD,UAAU,4BAGrB,sBAAKA,UAAW,uBAAhB,UACI,uCACA,cAAC,IAAD,CACIE,cAAe5C,EACf6C,SA5BS,SAACtB,GACtB,IAAMuB,EAAS,GAaf,OAXKvB,EAAOxB,WACR+C,EAAO/C,SAAW,YAGjBwB,EAAOzB,MAGP,2CAA2CiD,KAAKxB,EAAOzB,SAExDgD,EAAOhD,MAAQ,yBAJfgD,EAAOhD,MAAQ,WAMZgD,GAeKE,SAAU1B,EAHd,SAKK,gBACGC,EADH,EACGA,OACAuB,EAFH,EAEGA,OACAG,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACA7B,EANH,EAMGA,aACA8B,EAPH,EAOGA,aAPH,OASG,uBAAMV,UAAW,OAAQM,SAAU1B,EAAnC,UACI,uBACIR,KAAK,QACLuC,KAAK,QACLC,YAAa,QACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOlC,EAAOzB,QAElB,sBAAM4C,UAAW,sBAAjB,SACKI,EAAOhD,OAASmD,EAAQnD,OAASgD,EAAOhD,QAE7C,uBACIgB,KAAK,WACLuC,KAAK,WACLC,YAAa,WACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOlC,EAAOxB,WAElB,sBAAM2C,UAAW,sBAAjB,SACKO,EAAQlD,UAAY+C,EAAO/C,WAEhC,wBACI2C,UAAW,mBACX5B,KAAK,SACL4C,SAAUN,EAHd","file":"static/js/15.d8786235.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport {\n    LOADER,\n    LOGIN_USER,\n    MENU_CHANGE,\n    SET_SETTINGS,\n} from \"../../redux/actions\";\nimport { store } from \"react-notifications-component\";\nimport FetchClient from \"../../utils/FetchClient\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Views = ({ match: { url }, history, message }) => {\n    const [credentials] = useState({ email: \"\", password: \"\" });\n    const dispatch = useDispatch();\n\n    const {\n        authUser: { user },\n        settings: { userSettingsAdapter },\n    } = useStore().getState();\n\n    useEffect(() => {\n        if (user && user.email) {\n            history.push(`/app`);\n        }\n    });\n\n    useEffect(() => {\n        if (message) {\n            store.addNotification({\n                title: \"Info\",\n                message: message,\n                type: \"info\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                    duration: 5000,\n                    onScreen: true,\n                },\n            });\n        }\n    }, [message]);\n\n    const handleSubmit = async (values) => {\n        try {\n            dispatch({ type: LOADER });\n            const result = await FetchClient.post({\n                url: \"/signin\",\n                body: values,\n            });\n\n            dispatch({ type: LOADER });\n\n            if (result) {\n                localStorage.setItem(\n                    \"investorWalletUser\",\n                    JSON.stringify(result)\n                );\n\n                dispatch({\n                    type: LOGIN_USER,\n                    payload: { user: result },\n                });\n\n                dispatch({\n                    type: MENU_CHANGE,\n                    payload: \"home\",\n                });\n\n                userSettingsAdapter.setOptions(result);\n\n                if (result.settings) {\n                    localStorage.setItem(\n                        \"investorWalletUserSettings\",\n                        JSON.stringify(result.settings)\n                    );\n\n                    dispatch({\n                        type: SET_SETTINGS,\n                        payload: { ...result.settings },\n                    });\n                }\n\n                history.push(`/app`);\n            }\n        } catch (e) {\n            store.addNotification({\n                title: \"Failure\",\n                message: e.toString(),\n                type: \"danger\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                    duration: 3000,\n                    onScreen: true,\n                },\n            });\n            console.error(e);\n        }\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        if (!values.password) {\n            errors.password = \"Required\";\n        }\n\n        if (!values.email) {\n            errors.email = \"Required\";\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = \"Invalid email address\";\n        }\n        return errors;\n    };\n\n    return (\n        <>\n            <div className={\"logoutContainer withSpace\"}>\n                <NavLink to={`/`}>\n                    <i className=\"fas fa-sign-out-alt\" />\n                </NavLink>\n            </div>\n            <div className={\"formContainer m-auto\"}>\n                <h1>Login</h1>\n                <Formik\n                    initialValues={credentials}\n                    validate={handleValidation}\n                    onSubmit={handleSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <form className={\"form\"} onSubmit={handleSubmit}>\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder={\"email\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                            />\n                            <span className={\"formValidationError\"}>\n                                {errors.email && touched.email && errors.email}\n                            </span>\n                            <input\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder={\"password\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.password}\n                            />\n                            <span className={\"formValidationError\"}>\n                                {touched.password && errors.password}\n                            </span>\n                            <button\n                                className={\"formSubmitButton\"}\n                                type=\"submit\"\n                                disabled={isSubmitting}\n                            >\n                                Sign in\n                            </button>\n                        </form>\n                    )}\n                </Formik>\n            </div>\n        </>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}