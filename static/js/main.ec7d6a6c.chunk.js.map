{"version":3,"sources":["utils/FetchClient.js","utils/Messages.js","components/loader/index.js","redux/auth/actions.js","img/loader.gif","serviceWorker.js","redux/auth/reducer.js","redux/collections/index.js","utils/Model.js","redux/collections/reducer.js","redux/menu/reducer.js","redux/reducers.js","redux/auth/saga.js","redux/sagas.js","redux/store.js","index.js","redux/actions.js"],"names":["FetchClient","apiUrl","_url","_config","headers","credentials","url","fetch","this","method","response","json","body","JSON","stringify","status","_showUnauthorized","_showInternalServerError","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","Loader","className","src","loaderGif","alt","module","exports","Boolean","window","location","hostname","match","INIT_STATE","user","parse","localStorage","getItem","error","currencies","model","name","plural","_name","_plural","_fetchPending","_data","get","result","console","length","_fetchData","data","collections","items","label","path","current","reducers","combineReducers","authUser","state","action","LOGIN_USER","payload","LOGOUT_USER","undefined","menu","MENU_CHANGE","rootSaga","all","getState","authSagas","sagaMiddleware","createSagaMiddleware","middlewares","App","React","lazy","ReactDOM","render","StrictMode","initialState","createStore","compose","applyMiddleware","run","sagas","configureStore","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ec7d6a6c.chunk.js","sourcesContent":["import Messages from \"./Messages\";\n\nclass FetchClient extends Messages {\n    constructor({ apiUrl }) {\n        super();\n\n        this._url = apiUrl;\n        this._config = {\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Access-Control-Allow-Origin\": true,\n                \"Access-Control-Allow-Credentials\": true,\n            },\n            credentials: \"include\",\n        };\n    }\n\n    async get({ url }) {\n        const response = await fetch(`${this._url}/${url}`, {\n            ...this._config,\n            method: \"get\",\n        });\n        return await response.json();\n    }\n\n    async post({ url, body }) {\n        const response = await fetch(`${this._url}/${url}`, {\n            ...this._config,\n            method: \"post\",\n            body: JSON.stringify(body),\n        });\n\n        if (response?.status === 401) return this._showUnauthorized();\n        if (response?.status === 500) return this._showInternalServerError();\n\n        return await response.json();\n    }\n\n    async delete({ url }) {\n        const response = await fetch(`${this._url}/${url}`, {\n            ...this._config,\n            method: \"delete\",\n        });\n        return await response.json();\n    }\n}\n\nexport default new FetchClient({\n    apiUrl:\n        process.env.NODE_ENV === \"development\"\n            ? \"http://localhost:8080\"\n            : \"https://investor-wallet.herokuapp.com\",\n});\n","import { store } from \"react-notifications-component\";\n\nclass Messages {\n    _showUnauthorized() {\n        store.addNotification({\n            title: \"Failure\",\n            message:\n                \"Login failed - unauthorized. Check your e-mail or password.\",\n            type: \"danger\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n                duration: 4000,\n                onScreen: true,\n            },\n        });\n    }\n\n    _showInternalServerError() {\n        store.addNotification({\n            title: \"Failure\",\n            message: \"Internal server error. Contact with admin.\",\n            type: \"danger\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n                duration: 4000,\n                onScreen: true,\n            },\n        });\n    }\n}\n\nexport default Messages;\n","import loaderGif from \"../../img/loader.gif\";\nimport React from \"react\";\n\nconst Loader = () => <img className={\"loader\"} src={loaderGif} alt=\"loader\" />;\n\nexport default Loader;\n","import { LOGIN_USER } from \"../actions\";\n\nexport const loginUser = (user, history) => ({\n    type: LOGIN_USER,\n    payload: { user, history },\n});\n","module.exports = __webpack_public_path__ + \"static/media/loader.f6f2de36.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { LOGIN_USER, LOGOUT_USER } from \"../actions\";\n\nconst INIT_STATE = {\n    user: JSON.parse(localStorage.getItem(\"investorWalletUser\") || \"{}\"),\n    error: \"\",\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case LOGIN_USER:\n            return {\n                ...state,\n                user: action.payload.user,\n            };\n        case LOGOUT_USER:\n            return {\n                ...state,\n                user: undefined,\n            };\n        default:\n            return { ...state };\n    }\n};\n","import Model from \"../../utils/Model\";\n\nexport default {\n    currencies: {\n        model: new Model({\n            name: \"currencyRate\",\n            plural: \"currencyRates\",\n        }),\n        data: [],\n    },\n};\n","import FetchClient from \"./FetchClient\";\n\nclass Model {\n    constructor({ name, plural }) {\n        this._name = name;\n        this._plural = plural;\n        this._fetchPending = false;\n        this._data = [];\n    }\n\n    async _fetchData() {\n        try {\n            const result = await FetchClient.get({ url: `${this._plural}` });\n\n            this._fetchPending = false;\n\n            this._data = result;\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getData() {\n        if (this._data.length === 0 && !this._fetchPending) this._fetchData();\n\n        return this._data;\n    }\n}\n\nexport default Model;\n","import {} from \"../actions\";\nimport collections from \"./index\";\n\nconst INIT_STATE = {\n    ...collections,\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        default:\n            return { ...state };\n    }\n};\n","import { MENU_CHANGE } from \"../actions\";\n\nconst INIT_STATE = {\n    items: [\n        {\n            label: \"Home\",\n            name: \"home\",\n            path: \"\",\n        },\n        {\n            label: \"Currencies\",\n            name: \"currencies\",\n            path: \"/currencies\",\n        },\n        {\n            label: \"Crypto\",\n            name: \"crypto\",\n            path: \"/crypto\",\n        },\n        {\n            label: \"Metals\",\n            name: \"metals\",\n            path: \"/metals\",\n        },\n    ],\n    current: \"home\",\n};\n\nexport default (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case MENU_CHANGE: {\n            return { ...state, current: action.payload };\n        }\n\n        default:\n            return { ...state };\n    }\n};\n","import { combineReducers } from \"redux\";\n\nimport authUser from \"./auth/reducer\";\nimport collections from \"./collections/reducer\";\nimport menu from \"./menu/reducer\";\n\nconst reducers = combineReducers({\n    authUser,\n    collections,\n    menu,\n});\n\nexport default reducers;\n","import { all } from \"redux-saga/effects\";\n\nexport default function* rootSaga() {\n    yield all([]);\n}\n","import { all } from \"redux-saga/effects\";\nimport authSagas from \"./auth/saga\";\n\nexport default function* rootSaga(getState) {\n    yield all([authSagas()]);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n    const store = createStore(\n        reducers,\n        initialState,\n        compose(applyMiddleware(...middlewares))\n    );\n\n    sagaMiddleware.run(sagas);\n\n    if (module.hot) {\n        module.hot.accept(\"./reducers\", () => {\n            const nextRootReducer = require(\"./reducers\");\n            store.replaceReducer(nextRootReducer);\n        });\n    }\n\n    return store;\n}\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Loader from \"./components/loader\";\nimport { configureStore } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nconst App = React.lazy(() => import(\"./App\"));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureStore()}>\n            <Suspense fallback={<Loader />}>\n                <App />\n            </Suspense>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* AUTH */\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\n\n/* MENU */\nexport const MENU_CHANGE = \"MENU_CHANGE\";\n\nexport * from \"./auth/actions\";\nexport * from \"./collections/actions\";\nexport * from \"./menu/actions\";\n"],"sourceRoot":""}