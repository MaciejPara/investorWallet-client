{"version":3,"sources":["views/login/index.js"],"names":["Views","match","url","history","useState","email","password","credentials","dispatch","useDispatch","user","useStore","getState","authUser","useEffect","push","handleSubmit","values","a","setSubmitting","fetch","method","body","JSON","stringify","headers","response","json","result","localStorage","setItem","type","LOGIN_USER","payload","console","error","className","initialValues","validate","errors","test","onSubmit","touched","handleChange","handleBlur","isSubmitting","name","placeholder","onChange","onBlur","value","disabled"],"mappings":"+KAoHeA,UA/GD,SAAC,GAAgC,EAA9BC,MAASC,IAAsB,IAAfC,EAAc,EAAdA,QAAc,EACrBC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAA/CC,EADoC,oBAErCC,EAAWC,cAGDC,EACZC,cAAWC,WADXC,SAAYH,KAGhBI,qBAAU,WACFJ,GAAQA,EAAKL,OACbF,EAAQY,KAAR,WAIR,IAAMC,EAAY,uCAAG,WAAOC,EAAP,oBAAAC,EAAA,+DAAiBC,cAAjB,kBAEUC,MAAS,+BAAkC,CAC9DC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,GACrBQ,QAAS,CACL,eAAgB,mBAChB,+BAA+B,EAC/B,oCAAoC,GAExClB,YAAa,YAVJ,cAEPmB,EAFO,gBAYQA,EAASC,OAZjB,OAYPC,EAZO,OAcbC,aAAaC,QAAQ,qBAAsBP,KAAKC,UAAUI,IAE1DpB,EAAS,CACLuB,KAAMC,IACNC,QAAS,CAAEvB,KAAMkB,KAErBzB,EAAQY,KAAR,QApBa,kDAsBbmB,QAAQC,MAAR,MAtBa,0DAAH,wDA2ClB,OACI,yBAAKC,UAAW,wBACZ,0CACA,kBAAC,IAAD,CACIC,cAAe9B,EACf+B,SAtBa,SAACrB,GACtB,IAAMsB,EAAS,GAaf,OAXKtB,EAAOX,WACRiC,EAAOjC,SAAW,YAGjBW,EAAOZ,MAGP,2CAA2CmC,KAAKvB,EAAOZ,SAExDkC,EAAOlC,MAAQ,yBAJfkC,EAAOlC,MAAQ,WAMZkC,GASCE,SAAUzB,IAET,gBACGC,EADH,EACGA,OACAsB,EAFH,EAEGA,OACAG,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACA5B,EANH,EAMGA,aACA6B,EAPH,EAOGA,aAPH,OASG,0BAAMT,UAAW,OAAQK,SAAUzB,GAC/B,2BACIe,KAAK,QACLe,KAAK,QACLC,YAAa,QACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOjC,EAAOZ,QAElB,0BAAM+B,UAAW,uBACZG,EAAOlC,OAASqC,EAAQrC,OAASkC,EAAOlC,OAE7C,2BACI0B,KAAK,WACLe,KAAK,WACLC,YAAa,WACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOjC,EAAOX,WAElB,0BAAM8B,UAAW,uBACZG,EAAOlC,OAASqC,EAAQrC,OAASkC,EAAOlC,OAE7C,4BACI+B,UAAW,mBACXL,KAAK,SACLoB,SAAUN,GAHd","file":"static/js/10.d37daf4f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport { LOGIN_USER } from \"../../redux/actions\";\n\nconst Views = ({ match: { url }, history }) => {\n    const [credentials] = useState({ email: \"\", password: \"\" });\n    const dispatch = useDispatch();\n\n    const {\n        authUser: { user },\n    } = useStore().getState();\n\n    useEffect(() => {\n        if (user && user.email) {\n            history.push(`/app`);\n        }\n    });\n\n    const handleSubmit = async (values, { setSubmitting }) => {\n        try {\n            const response = await fetch(`${\"http://localhost:8080/signin\"}`, {\n                method: \"post\",\n                body: JSON.stringify(values),\n                headers: {\n                    \"content-type\": \"application/json\",\n                    \"Access-Control-Allow-Origin\": true,\n                    \"Access-Control-Allow-Credentials\": true,\n                },\n                credentials: \"include\",\n            });\n            const result = await response.json();\n\n            localStorage.setItem(\"investorWalletUser\", JSON.stringify(result));\n\n            dispatch({\n                type: LOGIN_USER,\n                payload: { user: result },\n            });\n            history.push(`/app`);\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        if (!values.password) {\n            errors.password = \"Required\";\n        }\n\n        if (!values.email) {\n            errors.email = \"Required\";\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = \"Invalid email address\";\n        }\n        return errors;\n    };\n\n    return (\n        <div className={\"formContainer m-auto\"}>\n            <h1>Login user</h1>\n            <Formik\n                initialValues={credentials}\n                validate={handleValidation}\n                onSubmit={handleSubmit}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                }) => (\n                    <form className={\"form\"} onSubmit={handleSubmit}>\n                        <input\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder={\"email\"}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                        />\n                        <span className={\"formValidationError\"}>\n                            {errors.email && touched.email && errors.email}\n                        </span>\n                        <input\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder={\"password\"}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.password}\n                        />\n                        <span className={\"formValidationError\"}>\n                            {errors.email && touched.email && errors.email}\n                        </span>\n                        <button\n                            className={\"formSubmitButton\"}\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                        >\n                            Submit\n                        </button>\n                    </form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}