{"version":3,"sources":["views/app/wallet/index.js"],"names":["WalletComponent","dispatch","useDispatch","useState","transactions","setTransactions","isNewTransaction","setNewTransaction","whatFilter","setWhatFilter","fromFilter","setFromFilter","autocompleteItems","setAutocompleteItems","fromAutocompleteItems","setFromAutocompleteItems","whatAutocomplete","setWhatAutocomplete","fromAutocomplete","setFromAutocomplete","amountOfWallet","setAmountOfWallet","useSelector","collections","base","settings","initFlag","type","SET_INIT_FLAG","categories","forEach","item","model","GET_CATEGORY_DATA","payload","url","getAllUrl","category","getCategoryName","whatData","label","value","toLowerCase","rate","fromData","data","el","result","name","push","JSON","stringify","useEffect","currentPrice","a","FetchClient","get","userId","length","map","found","find","what","count","id","_id","currentPricePercentage","calcPercentage","price","authUser","user","handleSubmit","investment","Date","now","post","body","console","log","error","createdAt","moment","toString","format","handleInvestmentDelete","delete","filter","toFixed","getDifferenceClass","className","onClick","initialValues","from","validate","values","errors","onSubmit","handleChange","touched","handleBlur","isSubmitting","htmlFor","wrapperStyle","width","getItemValue","items","includes","placeholder","renderItem","onChange","currentTarget","onSelect","val","target","onBlur","disabled","key","alert"],"mappings":"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","file":"static/js/12.a856b204.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport Autocomplete from \"react-autocomplete\";\nimport {\n    GET_CATEGORY_DATA,\n    SET_INIT_FLAG,\n} from \"../../../redux/collections/actions\";\nimport FetchClient from \"../../../utils/FetchClient\";\n\nconst WalletComponent = () => {\n    const dispatch = useDispatch();\n    const [transactions, setTransactions] = useState([]);\n    const [isNewTransaction, setNewTransaction] = useState(true);\n    const [whatFilter, setWhatFilter] = useState(\"\");\n    const [fromFilter, setFromFilter] = useState(\"\");\n    const [autocompleteItems, setAutocompleteItems] = useState([]);\n    const [fromAutocompleteItems, setFromAutocompleteItems] = useState([]);\n    const [whatAutocomplete, setWhatAutocomplete] = useState(\"\");\n    const [fromAutocomplete, setFromAutocomplete] = useState(\"\");\n    const [amountOfWallet, setAmountOfWallet] = useState(0);\n\n    useSelector(({ collections, settings: { base } }) => {\n        if (!collections.initFlag) {\n            dispatch({\n                type: SET_INIT_FLAG,\n            });\n\n            collections.categories.forEach((item) => {\n                const model = collections[item]?.model;\n\n                dispatch({\n                    type: GET_CATEGORY_DATA,\n                    payload: {\n                        url: model.getAllUrl(base),\n                        category: model.getCategoryName(),\n                    },\n                });\n            });\n        }\n    });\n\n    useSelector(\n        ({\n            collections: { categories, ...collections },\n            settings: { base },\n        }) => {\n            let whatData = [\n                { label: base, value: base.toLowerCase(), rate: 1 },\n            ];\n            let fromData = [\n                { label: base, value: base.toLowerCase(), rate: 1 },\n            ];\n\n            categories?.forEach((item) => {\n                collections[item].data?.forEach((el) => {\n                    const result = {\n                        label: el.name,\n                        value: el.name.toLowerCase(),\n                        ...el,\n                    };\n\n                    whatData.push(result);\n\n                    if (item === \"currencies\") {\n                        fromData.push(result);\n                    }\n                });\n            });\n\n            if (\n                JSON.stringify(autocompleteItems) !== JSON.stringify(whatData)\n            ) {\n                setAutocompleteItems(whatData);\n            }\n\n            if (\n                JSON.stringify(fromAutocompleteItems) !==\n                JSON.stringify(fromData)\n            ) {\n                setFromAutocompleteItems(fromData);\n            }\n        }\n    );\n\n    useEffect(() => {\n        let result = 0;\n\n        transactions.forEach(({ currentPrice }) => (result += currentPrice));\n\n        setAmountOfWallet(result);\n    }, [transactions]);\n\n    useEffect(() => {\n        (async () => {\n            const result = await FetchClient.get({\n                url: `/investments?filter=${JSON.stringify({\n                    userId: userId,\n                })}`,\n            });\n\n            if (result.length !== transactions.length) {\n                setTransactions(\n                    result.map((item) => {\n                        const found = autocompleteItems.find(\n                            ({ value }) => item.what.toLowerCase() === value\n                        );\n\n                        const currentPrice = found?.rate * item.count || 0;\n\n                        return {\n                            ...item,\n                            id: item._id,\n                            currentPrice,\n                            currentPricePercentage: calcPercentage(\n                                item.price,\n                                currentPrice\n                            ),\n                        };\n                    })\n                );\n            }\n        })();\n    }, [transactions, autocompleteItems]);\n\n    const userId = useSelector(({ ...store }) => store.authUser.user._id);\n\n    const handleAddTransaction = () => {\n        setNewTransaction(true);\n    };\n\n    const handleSubmit = async (data) => {\n        const investment = {\n            id: Date.now(),\n            ...data,\n            currentPrice: data.price,\n        };\n\n        try {\n            const result = await FetchClient.post({\n                url: \"/investment\",\n                body: {\n                    userId,\n                    ...investment,\n                },\n            });\n\n            console.log(\">>> \", result);\n        } catch (e) {\n            console.error(e);\n        }\n\n        setNewTransaction(false);\n        setTransactions([\n            ...transactions,\n            {\n                ...investment,\n                createdAt: moment(new Date().toString()).format(\n                    \"DD.MM.YYYY - HH:mm:ss\"\n                ),\n            },\n        ]);\n    };\n\n    const filterTransactions = ({ what, from }) => {\n        return (\n            what.toLowerCase().includes(whatFilter) &&\n            from.toLowerCase().includes(fromFilter)\n        );\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        [\"what\", \"count\", \"from\", \"price\"].forEach((item) => {\n            if (!values[item]) {\n                errors[item] = \"Required\";\n            }\n        });\n\n        return errors;\n    };\n\n    const handleInvestmentDelete = async (id) => {\n        try {\n            await FetchClient.delete({\n                url: `/investment/${id}`,\n            });\n        } catch (e) {\n            console.error(e);\n        }\n\n        setTransactions([...transactions.filter(({ id: tId }) => tId !== id)]);\n    };\n\n    const calcPercentage = (price, currentPrice) => {\n        return ((currentPrice / price) * 100 - 100).toFixed(1);\n    };\n\n    const getDifferenceClass = (price) => {\n        return price > 0 ? \"plus\" : \"minus\";\n    };\n\n    return (\n        <div>\n            <h2 className={\"sectionTitle\"}>\n                Amount in the wallet: {amountOfWallet || 0}\n            </h2>\n\n            <button\n                className={\"addTransactionButton\"}\n                onClick={handleAddTransaction}\n            >\n                <span>Add investment</span>{\" \"}\n                <i className=\"fa-solid fa-plus addIcon\" />\n            </button>\n            {isNewTransaction && (\n                <div className={\"newTransaction\"}>\n                    <Formik\n                        initialValues={{\n                            what: \"\",\n                            count: \"\",\n                            from: \"\",\n                            price: \"\",\n                        }}\n                        validate={handleValidation}\n                        onSubmit={handleSubmit}\n                    >\n                        {({\n                            values,\n                            errors,\n                            touched,\n                            handleChange,\n                            handleBlur,\n                            handleSubmit,\n                            isSubmitting,\n                        }) => (\n                            <form\n                                className={\"newTransaction-form\"}\n                                onSubmit={handleSubmit}\n                            >\n                                <div className={\"fieldsContainer\"}>\n                                    <div className={`formField ${errors.what}`}>\n                                        <label htmlFor=\"what\">What</label>\n                                        <Autocomplete\n                                            wrapperStyle={{\n                                                width: \"100%\",\n                                            }}\n                                            getItemValue={(item) => item.label}\n                                            items={autocompleteItems.filter(\n                                                ({ value }) =>\n                                                    value.includes(\n                                                        whatAutocomplete.toLowerCase()\n                                                    )\n                                            )}\n                                            placeholder={\"What\"}\n                                            renderItem={({ label }) => (\n                                                <div\n                                                    className={\n                                                        \"autocomplete-item\"\n                                                    }\n                                                >\n                                                    {label}\n                                                </div>\n                                            )}\n                                            value={whatAutocomplete}\n                                            onChange={({\n                                                currentTarget: { value },\n                                            }) => {\n                                                setWhatAutocomplete(value);\n                                            }}\n                                            onSelect={(val) => {\n                                                handleChange({\n                                                    target: {\n                                                        name: \"what\",\n                                                        value: val,\n                                                    },\n                                                    currentTarget: {\n                                                        name: \"what\",\n                                                        value: val,\n                                                    },\n                                                });\n                                                setWhatAutocomplete(val);\n                                            }}\n                                        />\n                                    </div>\n                                    <div\n                                        className={`formField ${errors.count}`}\n                                    >\n                                        <label htmlFor=\"count\">Count</label>\n                                        <input\n                                            type=\"number\"\n                                            name=\"count\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.count}\n                                        />\n                                    </div>\n                                    <div className={`formField ${errors.from}`}>\n                                        <label htmlFor=\"from\">From</label>\n                                        <Autocomplete\n                                            wrapperStyle={{\n                                                width: \"100%\",\n                                            }}\n                                            getItemValue={(item) => item.label}\n                                            items={fromAutocompleteItems.filter(\n                                                ({ value }) =>\n                                                    value.includes(\n                                                        fromAutocomplete.toLowerCase()\n                                                    )\n                                            )}\n                                            renderItem={({ label }) => (\n                                                <div\n                                                    className={\n                                                        \"autocomplete-item\"\n                                                    }\n                                                >\n                                                    {label}\n                                                </div>\n                                            )}\n                                            value={fromAutocomplete}\n                                            onChange={({\n                                                currentTarget: { value },\n                                            }) => {\n                                                setFromAutocomplete(value);\n                                            }}\n                                            onSelect={(val) => {\n                                                handleChange({\n                                                    target: {\n                                                        name: \"from\",\n                                                        value: val,\n                                                    },\n                                                    currentTarget: {\n                                                        name: \"from\",\n                                                        value: val,\n                                                    },\n                                                });\n                                                setFromAutocomplete(val);\n                                            }}\n                                        />\n                                    </div>\n                                    <div\n                                        className={`formField ${errors.price}`}\n                                    >\n                                        <label htmlFor=\"price\">Price</label>\n                                        <input\n                                            type=\"number\"\n                                            name=\"price\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.price}\n                                        />\n                                    </div>\n                                    <div className={\"buttonsContainer\"}>\n                                        <button\n                                            className={\"formButton\"}\n                                            type=\"submit\"\n                                            disabled={isSubmitting}\n                                        >\n                                            Add\n                                        </button>\n                                        <button\n                                            className={\n                                                \"formButton formButton-cancel\"\n                                            }\n                                            type=\"cancel\"\n                                            onClick={() =>\n                                                setNewTransaction(false)\n                                            }\n                                        >\n                                            Cancel\n                                        </button>\n                                    </div>\n                                </div>\n                            </form>\n                        )}\n                    </Formik>\n                </div>\n            )}\n            <div className={\"transactionContainer tableContainer\"}>\n                {transactions.length ? (\n                    <div>\n                        <h3 className={\"sectionTitle\"}>Investments:</h3>\n                        <div\n                            className={\n                                \"tableHeaderContainer row w-100 m-auto d-flex\"\n                            }\n                        >\n                            <span className={\"tableHeader\"}>When</span>\n                            <span className={\"tableHeader\"}>\n                                <input\n                                    type=\"text\"\n                                    placeholder={\"What 🔍\"}\n                                    value={whatFilter}\n                                    onChange={({ currentTarget: { value } }) =>\n                                        setWhatFilter(value.toLowerCase())\n                                    }\n                                />\n                            </span>\n                            <span className={\"tableHeader\"}>Count</span>\n                            <span className={\"tableHeader\"}>\n                                <input\n                                    type=\"text\"\n                                    placeholder={\"From 🔍\"}\n                                    value={fromFilter}\n                                    onChange={({ currentTarget: { value } }) =>\n                                        setFromFilter(value.toLowerCase())\n                                    }\n                                />\n                            </span>\n                            <span className={\"tableHeader m-auto\"}>Price</span>\n                            <span className={\"tableHeader m-auto\"}>\n                                Current Price\n                            </span>\n                            <span className={\"tableHeader m-auto\"} />\n                        </div>\n                    </div>\n                ) : (\n                    \"\"\n                )}\n                <div className={\"d-flex w-100 m-auto flex-column\"}>\n                    {transactions\n                        .filter(filterTransactions)\n                        .map(\n                            (\n                                {\n                                    id,\n                                    what,\n                                    count,\n                                    from,\n                                    price,\n                                    createdAt,\n                                    currentPrice,\n                                    currentPricePercentage,\n                                },\n                                key\n                            ) => (\n                                <div\n                                    key={key}\n                                    className={\n                                        \"transaction categoryItem row w-100 m-auto d-flex\"\n                                    }\n                                >\n                                    <span className={\"cell date\"}>\n                                        {createdAt}\n                                    </span>\n                                    <span className={\"cell\"}>{what}</span>\n                                    <span className={\"cell\"}>{count}</span>\n                                    <span className={\"cell\"}>{from}</span>\n                                    <span className={\"cell\"}>{price}</span>\n                                    <span\n                                        className={`cell m-auto difference ${getDifferenceClass(\n                                            currentPricePercentage\n                                        )} currentPrice`}\n                                    >\n                                        <span>{currentPrice} | </span>\n                                        <span className={\"percentage\"}>\n                                            {currentPricePercentage}%\n                                        </span>\n                                    </span>\n                                    <span className={\"cell actions\"}>\n                                        <i\n                                            className=\"far fa-trash-alt\"\n                                            onClick={() =>\n                                                handleInvestmentDelete(id)\n                                            }\n                                        />\n                                        <i\n                                            className=\"fas fa-info-circle ml-4\"\n                                            onClick={() =>\n                                                alert(`details ${id}`)\n                                            }\n                                        />\n                                    </span>\n                                </div>\n                            )\n                        )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default WalletComponent;\n"],"sourceRoot":""}