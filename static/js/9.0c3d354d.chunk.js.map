{"version":3,"sources":["components/navbar/index.js","components/customSelect/index.js","views/app/index.js"],"names":["Navbar","url","match","useStore","getState","menu","items","current","dispatch","useDispatch","className","map","key","label","name","path","onClick","type","MENU_CHANGE","payload","to","length","CustomSelect","handleChange","handleBlur","defaultValue","options","menuPlacement","colourStyles","menuList","provided","state","paddingTop","paddingBottom","defaultStyles","backgroundColor","WebkitBoxShadow","MozBoxShadow","boxShadow","borderRadius","color","input","singleValue","control","styles","isFocused","border","outline","dropdownIndicator","data","cursor","indicatorSeparator","option","isSelected","onChange","onBlur","MainAppView","React","lazy","CategoryComponent","Views","props","collections","settings","useState","base","baseState","setBaseState","handleBaseChange","a","value","userSettingsAdapter","changeBase","result","ok","categories","forEach","item","model","GET_CATEGORY_DATA","getAllUrl","category","getCategoryName","SET_SETTINGS","baseOptions","find","fallback","exact","render"],"mappings":"6LAqCeA,EAhCA,SAAC,GAAwB,IAAbC,EAAY,EAArBC,MAASD,IAAY,EAG/BE,cAAWC,WADXC,KAAQC,EAFuB,EAEvBA,MAAOC,EAFgB,EAEhBA,QAGbC,EAAWC,cAEjB,OACI,yBAAKC,UAAW,cACXJ,EAAMK,KAAI,WAAwBC,GAAxB,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,KAAhB,OACP,kBAAC,IAAD,CACIC,QAAS,WACLR,EAAS,CAAES,KAAMC,cAAaC,QAASL,KAE3CF,IAAKA,EACLQ,GAAE,UAAKnB,GAAL,OAAWc,GACbL,UAAS,UAAa,IAARE,EAAA,UAAwB,GAA7B,YACLA,IAAQN,EAAMe,OAAS,EAAvB,UAAuC,GADlC,YAELd,IAAYO,EAAO,cAAgB,GAF9B,MAIRD,MAGT,yBAAKH,UAAW,mBACZ,kBAAC,IAAD,CAASU,GAAE,WACP,uBAAGV,UAAU,4B,eCgFlBY,EA1GM,SAAC,GAMf,IALHC,EAKE,EALFA,aACAC,EAIE,EAJFA,WACAC,EAGE,EAHFA,aACAC,EAEE,EAFFA,QACAC,EACE,EADFA,cAEMC,EAAe,CACjBC,SAAU,SAACC,EAAUC,GAAX,mBAAC,eACJD,GADG,IAENE,WAAY,EACZC,cAAe,KAEnB5B,KAAM,SAAC6B,GACH,OAAO,2BACAA,GADP,IAEIC,gBAAiB,UACjBC,gBAAiB,wCACjBC,aAAc,wCACdC,UAAW,wCACXC,aAAc,EACdC,MAAO,UACP,SAAU,CACNJ,gBAAiB,0BACjBC,aAAc,0BACdC,UAAW,0BACXE,MAAO,cAInBC,MAAO,SAACP,GACJ,OAAO,2BACAA,GADP,IAEIM,MAAO,UACP,SAAU,CACNA,MAAO,cAInBE,YAAa,SAACR,GACV,OAAO,2BACAA,GADP,IAEIM,MAAO,UACP,SAAU,CACNA,MAAO,cAInBG,QAAS,SAACC,EAAD,KAAWC,UAAX,mBAAC,eACHD,GADE,IAELT,gBAAiB,cACjBW,OAAoB,oBACpBP,aAAc,EACdD,UAAW,OACX,SAAU,CACNQ,OAAQ,qBAEZC,QAAS,UAEbC,kBAAmB,SAACJ,EAAD,GAAsB,EAAXK,KAC1B,OAAO,2BACAL,GADP,IAEIJ,MAAO,OACPU,OAAQ,UACR,SAAU,CACNV,MAAO,cAInBW,mBAAoB,SAACP,GACjB,OAAO,2BACAA,GADP,IAEIT,gBAAiB,aAGzBiB,OAAQ,SAACR,EAAD,GAA6B,IAAlBS,EAAiB,EAAjBA,WACf,OAAO,2BACAT,GADP,IAEIT,gBAAiBkB,EAAa,mBAAqB,UACnDb,MAAOa,EAAa,UAAY,UAChCH,OAAQ,UACR,SAAU,CACNV,MAAO,UACPL,gBAAiB,WAErB,GAAI,CACAK,MAAO,UACPL,gBAAiB,eAMjC,OACI,kBAAC,IAAD,CACIR,cAAeA,GAAiB,OAChCjB,UAAW,mBACXe,aAAcA,EACdC,QAASA,EACT4B,SAAU/B,GAAgB,KAC1BgC,OAAQ/B,GAAc,KACtBoB,OAAQhB,K,gBC/Fd4B,EAAcC,IAAMC,MAAK,kBAAM,iCAC/BC,EAAoBF,IAAMC,MAAK,kBAAM,sDA+E5BE,UA7ED,SAACC,GAAW,IAET5D,EACT4D,EADA3D,MAASD,IAGPO,EAAWC,cALI,EAMaN,cAAWC,WAArC0D,EANa,EAMbA,YAAaC,EANA,EAMAA,SANA,EAOaC,mBAASD,EAASE,MAP/B,mBAOdC,EAPc,KAOHC,EAPG,KASfC,EAAgB,uCAAG,+BAAAC,EAAA,0DAASC,EAAT,EAASA,SAChBJ,EADO,gCAEIH,EAASQ,oBAAoBC,WAAWF,GAF5C,QAGjB,QADMG,EAFW,cAGjB,IAAIA,OAAJ,EAAIA,EAAQC,MACRZ,EAAYa,WAAWC,SAAQ,SAACC,GAAU,IAAD,EAC/BC,EAAK,UAAGhB,EAAYe,UAAf,aAAG,EAAmBC,MAEjCtE,EAAS,CACLS,KAAM8D,IACN5D,QAAS,CACLlB,IAAK6E,EAAME,UAAUV,GACrBW,SAAUH,EAAMI,wBAI5B1E,EAAS,CACLS,KAAMkE,IACNhE,QAAS,CAAE8C,KAAMK,KAErBH,EAAaG,IAnBA,2CAAH,sDAwBtB,OACI,yBAAK5D,UAAW,SACZ,kBAAC,EAAWmD,GACZ,yBAAKnD,UAAW,sBACZ,sCAEI,kBAAC,EAAD,CACIiB,cAAe,MACfF,aAAcsC,EAASqB,YAAYC,MAC/B,qBAAGf,QAAsBJ,KAE7BxC,QAASqC,EAASqB,YAClB7D,aAAc6C,MAK1B,kBAAC,WAAD,CAAUkB,SAAU,kBAAC,IAAD,OAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,OAAK,EACLxE,KAAI,UAAKd,EAAL,KACJuF,OAAQ,SAAC3B,GAAD,OAAW,kBAACL,EAAgBK,MAJ5C,OAMKC,QANL,IAMKA,OANL,EAMKA,EAAaa,WAAWhE,KAAI,SAACkE,EAAMjE,GAAP,OACzB,kBAAC,IAAD,CACIA,IAAKA,EACL2E,OAAK,EACLxE,KAAI,UAAKd,EAAL,YAAY4E,GAChBW,OAAQ,SAAC3B,GAAD,aACJ,kBAACF,EAAD,iBACQE,EADR,CAEIiB,MAAK,UAAEhB,EAAYe,UAAd,aAAE,EAAmBC,eAK1C,kBAAC,IAAD,CAAU1D,GAAG","file":"static/js/9.0c3d354d.chunk.js","sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport React from \"react\";\nimport { useStore, useDispatch } from \"react-redux\";\nimport { MENU_CHANGE } from \"../../redux/actions\";\n\nconst Navbar = ({ match: { url } }) => {\n    const {\n        menu: { items, current },\n    } = useStore().getState();\n\n    const dispatch = useDispatch();\n\n    return (\n        <nav className={\"navigation\"}>\n            {items.map(({ label, name, path }, key) => (\n                <NavLink\n                    onClick={() => {\n                        dispatch({ type: MENU_CHANGE, payload: name });\n                    }}\n                    key={key}\n                    to={`${url}${path}`}\n                    className={`${key === 0 ? `ml-auto` : \"\"} ${\n                        key === items.length - 1 ? `mr-auto` : \"\"\n                    } ${current === name ? \"activeClass\" : \"\"} `}\n                >\n                    {label}\n                </NavLink>\n            ))}\n            <div className={\"logoutContainer\"}>\n                <NavLink to={`/logout`}>\n                    <i className=\"fas fa-sign-out-alt\" />\n                </NavLink>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport Select from \"react-select\";\n\n//@todo check warning bugs\nconst CustomSelect = ({\n    handleChange,\n    handleBlur,\n    defaultValue,\n    options,\n    menuPlacement,\n}) => {\n    const colourStyles = {\n        menuList: (provided, state) => ({\n            ...provided,\n            paddingTop: 0,\n            paddingBottom: 0,\n        }),\n        menu: (defaultStyles) => {\n            return {\n                ...defaultStyles,\n                backgroundColor: \"#282c34\",\n                WebkitBoxShadow: \"0px 0px 3px 1px rgba(255,255,255,0.8)\",\n                MozBoxShadow: \"0px 0px 3px 1px rgba(255,255,255,0.8)\",\n                boxShadow: \"0px 0px 3px 1px rgba(255,255,255,0.8)\",\n                borderRadius: 0,\n                color: \"#ffffff\",\n                \":hover\": {\n                    WebkitBoxShadow: \"0px 0px 3px 1px #c0ff00\",\n                    MozBoxShadow: \"0px 0px 3px 1px #c0ff00\",\n                    boxShadow: \"0px 0px 3px 1px #c0ff00\",\n                    color: \"#c0ff00\",\n                },\n            };\n        },\n        input: (defaultStyles) => {\n            return {\n                ...defaultStyles,\n                color: \"#ffffff\",\n                \":hover\": {\n                    color: \"#c0ff00\",\n                },\n            };\n        },\n        singleValue: (defaultStyles) => {\n            return {\n                ...defaultStyles,\n                color: \"#ffffff\",\n                \":hover\": {\n                    color: \"#c0ff00\",\n                },\n            };\n        },\n        control: (styles, { isFocused }) => ({\n            ...styles,\n            backgroundColor: \"transparent\",\n            border: isFocused ? \"1px solid #c0ff00\" : \"1px solid #c0ff00\",\n            borderRadius: 0,\n            boxShadow: \"none\",\n            \":hover\": {\n                border: \"1px solid #c0ff00\",\n            },\n            outline: \"none\",\n        }),\n        dropdownIndicator: (styles, { data }) => {\n            return {\n                ...styles,\n                color: \"#fff\",\n                cursor: \"pointer\",\n                \":hover\": {\n                    color: \"#c0ff00\",\n                },\n            };\n        },\n        indicatorSeparator: (styles) => {\n            return {\n                ...styles,\n                backgroundColor: \"#c0ff00\",\n            };\n        },\n        option: (styles, { isSelected }) => {\n            return {\n                ...styles,\n                backgroundColor: isSelected ? \"rgb(170, 240, 0)\" : \"#282c34\",\n                color: isSelected ? \"#282c34\" : \"#c0ff00\",\n                cursor: \"pointer\",\n                \":hover\": {\n                    color: \"#282c34\",\n                    backgroundColor: \"#c0ff00\",\n                },\n                \"\": {\n                    color: \"#282c34\",\n                    backgroundColor: \"#c0ff00\",\n                },\n            };\n        },\n    };\n\n    return (\n        <Select\n            menuPlacement={menuPlacement || \"down\"}\n            className={\"baseOptionSelect\"}\n            defaultValue={defaultValue}\n            options={options}\n            onChange={handleChange || null}\n            onBlur={handleBlur || null}\n            styles={colourStyles}\n        />\n    );\n};\n\nexport default CustomSelect;\n","import React, { Suspense, useState } from \"react\";\nimport { useStore, useDispatch } from \"react-redux\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Loader from \"../../components/loader\";\nimport Navbar from \"../../components/navbar\";\n\nimport CustomSelect from \"../../components/customSelect\";\nimport { GET_CATEGORY_DATA } from \"../../redux/collections/actions\";\nimport { SET_SETTINGS } from \"../../redux/settings/actions\";\n\nconst MainAppView = React.lazy(() => import(\"./main\"));\nconst CategoryComponent = React.lazy(() => import(\"./category\"));\n\nconst Views = (props) => {\n    const {\n        match: { url },\n    } = props;\n\n    const dispatch = useDispatch();\n    const { collections, settings } = useStore().getState();\n    const [baseState, setBaseState] = useState(settings.base);\n\n    const handleBaseChange = async ({ value }) => {\n        if (value !== baseState) {\n            const result = await settings.userSettingsAdapter.changeBase(value);\n            if (result?.ok) {\n                collections.categories.forEach((item) => {\n                    const model = collections[item]?.model;\n\n                    dispatch({\n                        type: GET_CATEGORY_DATA,\n                        payload: {\n                            url: model.getAllUrl(value),\n                            category: model.getCategoryName(),\n                        },\n                    });\n                });\n                dispatch({\n                    type: SET_SETTINGS,\n                    payload: { base: value },\n                });\n                setBaseState(value);\n            }\n        }\n    };\n\n    return (\n        <div className={\"views\"}>\n            <Navbar {...props} />\n            <div className={\"userSettingsFooter\"}>\n                <span>\n                    base:\n                    <CustomSelect\n                        menuPlacement={\"top\"}\n                        defaultValue={settings.baseOptions.find(\n                            ({ value }) => value === baseState\n                        )}\n                        options={settings.baseOptions}\n                        handleChange={handleBaseChange}\n                    />\n                </span>\n            </div>\n\n            <Suspense fallback={<Loader />}>\n                <Switch>\n                    <Route\n                        exact\n                        path={`${url}/`}\n                        render={(props) => <MainAppView {...props} />}\n                    />\n                    {collections?.categories.map((item, key) => (\n                        <Route\n                            key={key}\n                            exact\n                            path={`${url}/${item}`}\n                            render={(props) => (\n                                <CategoryComponent\n                                    {...props}\n                                    model={collections[item]?.model}\n                                />\n                            )}\n                        />\n                    ))}\n                    <Redirect to=\"/error\" />\n                </Switch>\n            </Suspense>\n        </div>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}