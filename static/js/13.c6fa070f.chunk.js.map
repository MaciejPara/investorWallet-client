{"version":3,"sources":["views/app/investment/index.js"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","InvestmentComponent","history","match","params","id","useState","value","label","delayOptions","dateDelayInit","setDateDelayInit","getDateFromNow","days","moment","add","format","useStore","getState","authUser","user","userId","startDate","setStartDate","endDate","setEndDate","investment","setInvestment","dateDelay","setDateDelay","data","setData","simpleView","setSimpleView","currency","setCurrency","useEffect","length","a","FetchClient","get","url","JSON","stringify","result","found","find","_id","what","toLowerCase","fetch","res","json","rates","map","date","effectiveDate","price","mid","lineOptions","responsive","plugins","legend","position","title","display","text","lineData","labels","datasets","borderColor","backgroundColor","className","onClick","goBack","from","count","createdAt","updatedAt","menuPlacement","defaultValue","options","handleChange","disabled"],"mappings":"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","file":"static/js/13.c6fa070f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useStore } from \"react-redux\";\nimport FetchClient from \"../../../utils/FetchClient\";\nimport CustomSelect from \"../../../components/customSelect\";\nimport moment from \"moment\";\n\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from \"chart.js\";\n\nimport { Line } from \"react-chartjs-2\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst InvestmentComponent = ({\n    history,\n    match: { params: { id } = {} } = {},\n    ...props\n}) => {\n    const [delayOptions] = useState([\n        { value: 7, label: \"1 week\" },\n        { value: 14, label: \"2 weeks\" },\n        { value: 30, label: \"30 days\" },\n        { value: 60, label: \"60 days\" },\n        { value: 90, label: \"90 days\" },\n        { value: 120, label: \"120 days\" },\n        { value: 365, label: \"1 year\" },\n    ]);\n    const [dateDelayInit, setDateDelayInit] = useState(30);\n\n    const getDateFromNow = (days = -dateDelayInit) => {\n        return moment().add(days, \"days\").format(\"YYYY-MM-DD\");\n    };\n\n    const { authUser: { user: { id: userId } = {} } = {} } =\n        useStore().getState();\n    const [startDate, setStartDate] = useState(getDateFromNow());\n    const [endDate, setEndDate] = useState(getDateFromNow(0));\n    const [investment, setInvestment] = useState();\n    const [dateDelay, setDateDelay] = useState(-dateDelayInit);\n    const [data, setData] = useState([]);\n    const [simpleView, setSimpleView] = useState(false);\n    const [currency, setCurrency] = useState();\n\n    useEffect(() => {\n        if (id?.length === 3) {\n            setCurrency(id);\n        } else {\n            (async () => {\n                const result = await FetchClient.get({\n                    url: `/investments?filter=${JSON.stringify({\n                        userId: userId,\n                    })}`,\n                });\n                const found = result.find(({ _id: i }) => i === id);\n                if (found) {\n                    setCurrency(found.what.toLowerCase());\n                    setInvestment(found);\n                } else {\n                    setSimpleView(true);\n                }\n            })();\n        }\n    }, []);\n\n    useEffect(() => {\n        (async () => {\n            if (investment || currency) {\n                try {\n                    const res = await fetch(\n                        `https://api.nbp.pl/api/exchangerates/rates/a/${currency}/${startDate}/${endDate}?format=JSON`\n                    );\n                    const json = await res.json();\n\n                    setData(\n                        json.rates.map(\n                            ({ effectiveDate: date, mid: price }) => ({\n                                date,\n                                price,\n                            })\n                        )\n                    );\n                    setSimpleView(false);\n                } catch (e) {\n                    setSimpleView(true);\n                }\n            }\n        })();\n    }, [dateDelay, investment, currency, dateDelayInit]);\n\n    const lineOptions = {\n        responsive: true,\n        plugins: {\n            legend: {\n                position: \"top\",\n            },\n            title: {\n                display: true,\n                text: `${\n                    investment?.what || currency\n                } price between ${startDate} - ${endDate}`,\n            },\n        },\n    };\n\n    const lineData = {\n        labels: data.map(({ date }) => date),\n        datasets: [\n            {\n                label: \"Price\",\n                data: data.map(({ price }) => price),\n                borderColor: \"#c0ff00\",\n                backgroundColor: \"#c0ff00\",\n            },\n        ],\n    };\n\n    return (\n        <div className={\"text-left detailsView\"}>\n            <button onClick={() => history.goBack()}>Go Back</button>\n            {simpleView ? (\n                <div className={\"text-center\"}>\n                    <h4>Sorry, details for this instrument cannot be seen..</h4>\n                </div>\n            ) : (\n                <>\n                    {investment && (\n                        <>\n                            <div className={\"detailsData\"}>\n                                <p className={\"detailsData-item\"}>\n                                    <span className={\"label\"}>\n                                        What you bought:\n                                    </span>{\" \"}\n                                    {investment.what}\n                                </p>\n                                <p className={\"detailsData-item\"}>\n                                    <span className={\"label\"}>\n                                        From what you bought:\n                                    </span>{\" \"}\n                                    {investment.from}\n                                </p>\n                                <p className={\"detailsData-item\"}>\n                                    <span className={\"label\"}>\n                                        Price you paid:\n                                    </span>{\" \"}\n                                    {investment.price}\n                                </p>\n                                <p className={\"detailsData-item\"}>\n                                    <span className={\"label\"}>\n                                        Amount you get:\n                                    </span>{\" \"}\n                                    {investment.count}\n                                </p>\n                                <p className={\"detailsData-item\"}>\n                                    <span className={\"label\"}>\n                                        Date of transaction:\n                                    </span>{\" \"}\n                                    {moment(investment.createdAt).format(\n                                        \"YYYY-MM-DD hh:mm:ss\"\n                                    )}\n                                </p>\n                                <p className={\"detailsData-item\"}>\n                                    <span className={\"label\"}>\n                                        Date of update:\n                                    </span>{\" \"}\n                                    {moment(investment.updatedAt).format(\n                                        \"YYYY-MM-DD hh:mm:ss\"\n                                    )}\n                                </p>\n                            </div>\n                        </>\n                    )}\n                    {(currency || investment) && (\n                        <div className={\"chartContainer mt-3\"}>\n                            <div className={\"chartButtons text-right mb-5\"}>\n                                <CustomSelect\n                                    className={\"monthsSelect\"}\n                                    menuPlacement={\"top\"}\n                                    defaultValue={delayOptions.find(\n                                        ({ value }) => value === dateDelayInit\n                                    )}\n                                    options={delayOptions}\n                                    handleChange={({ value }) => {\n                                        setDateDelay(-value);\n                                        setDateDelayInit(value);\n                                        setStartDate(getDateFromNow(-value));\n                                        setEndDate(getDateFromNow(0));\n                                    }}\n                                />\n                                <button\n                                    className={\"formButton ml-4\"}\n                                    onClick={() => {\n                                        setStartDate(\n                                            getDateFromNow(\n                                                dateDelay - dateDelayInit\n                                            )\n                                        );\n                                        setEndDate(getDateFromNow(dateDelay));\n                                        setDateDelay(dateDelay - dateDelayInit);\n                                    }}\n                                >\n                                    move backward\n                                </button>\n\n                                <button\n                                    disabled={dateDelay >= -dateDelayInit}\n                                    className={\"formButton\"}\n                                    onClick={() => {\n                                        const days = dateDelay + dateDelayInit;\n                                        setDateDelay(days);\n                                        setStartDate(getDateFromNow(days));\n                                        setEndDate(\n                                            getDateFromNow(days + dateDelayInit)\n                                        );\n                                    }}\n                                >\n                                    move forward\n                                </button>\n                            </div>\n                            <Line options={lineOptions} data={lineData} />\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default InvestmentComponent;\n"],"sourceRoot":""}