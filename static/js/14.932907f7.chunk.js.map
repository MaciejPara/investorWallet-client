{"version":3,"sources":["views/register/index.js"],"names":["Views","match","url","history","useState","email","password","passwordRepeat","credentials","user","useDispatch","useStore","getState","authUser","useEffect","push","handleSubmit","values","a","setSubmitting","FetchClient","post","body","result","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","toString","console","error","className","to","initialValues","validate","errors","length","test","onSubmit","touched","handleChange","handleBlur","isSubmitting","name","placeholder","onChange","onBlur","value","autoComplete","disabled"],"mappings":"sMAkLeA,UA1KD,SAAC,GAAgC,EAA9BC,MAASC,IAAsB,IAAfC,EAAc,EAAdA,QAAc,EACrBC,mBAAS,CAC3BC,MAAO,GACPC,SAAU,GACVC,eAAgB,KAHbC,EADoC,oBAS3BC,GAHCC,cAIbC,cAAWC,WADXC,SAAYJ,MAGhBK,qBAAU,WACFL,GAAQA,EAAKJ,OACbF,EAAQY,KAAR,WAIR,IAAMC,EAAY,uCAAG,WAAOC,EAAP,oBAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,cAAjB,kBAEQC,IAAYC,KAAK,CAClCnB,IAAK,UACLoB,KAAML,IAJG,OAEPM,EAFO,OAObJ,GAAc,GAEVI,IACAC,QAAMC,gBAAgB,CAClBC,MAAO,UACPC,QAAO,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAQI,QACjBC,KAAM,UACNC,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,KAIlBhC,EAAQY,KAAR,WAxBS,gDA2BbS,QAAMC,gBAAgB,CAClBC,MAAO,UACPC,QAAS,KAAES,WACXR,KAAM,SACNC,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACLC,SAAU,IACVC,UAAU,KAGlBhB,GAAc,GACdkB,QAAQC,MAAR,MAzCa,yDAAH,wDA6ElB,OACI,oCACI,yBAAKC,UAAW,6BACZ,kBAAC,IAAD,CAASC,GAAE,KACP,uBAAGD,UAAU,0BAGrB,yBAAKA,UAAW,wBACZ,wCACA,kBAAC,IAAD,CACIE,cAAejC,EACfkC,SA3CS,SAACzB,GACtB,IAAM0B,EAAS,GA4Bf,OA1BK1B,EAAOX,WACRqC,EAAOrC,SAAW,YAGjBW,EAAOV,iBACRoC,EAAOpC,eAAiB,YAIxBU,EAAOV,gBACPU,EAAOX,WAAaW,EAAOV,iBAE3BoC,EAAOpC,eAAiB,+BAGxBU,EAAOX,UAAYW,EAAOX,SAASsC,OAAS,IAC5CD,EAAOrC,SAAW,gDAGjBW,EAAOZ,MAGP,2CAA2CwC,KAAK5B,EAAOZ,SAExDsC,EAAOtC,MAAQ,yBAJfsC,EAAOtC,MAAQ,WAMZsC,GAeKG,SAAU9B,IAET,gBACGC,EADH,EACGA,OACA0B,EAFH,EAEGA,OACAI,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACAjC,EANH,EAMGA,aACAkC,EAPH,EAOGA,aAPH,OASG,0BAAMX,UAAW,OAAQO,SAAU9B,GAC/B,2BACIY,KAAK,QACLuB,KAAK,QACLC,YAAa,QACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOtC,EAAOZ,QAElB,0BAAMkC,UAAW,uBACZQ,EAAQ1C,OAASsC,EAAOtC,OAE7B,2BACIuB,KAAK,WACLuB,KAAK,WACLC,YAAa,WACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOtC,EAAOX,SACdkD,aAAa,iBAEjB,0BAAMjB,UAAW,uBACZQ,EAAQzC,UAAYqC,EAAOrC,UAEhC,2BACIsB,KAAK,WACLuB,KAAK,iBACLC,YAAa,kBACbC,SAAUL,EACVM,OAAQL,EACRM,MAAOtC,EAAOV,eACdiD,aAAa,iBAEjB,0BAAMjB,UAAW,uBACZQ,EAAQxC,gBACLoC,EAAOpC,gBAEf,4BACIgC,UAAW,mBACXX,KAAK,SACL6B,SAAUP,GAHd","file":"static/js/14.932907f7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useStore } from \"react-redux\";\nimport { LOGIN_USER } from \"../../redux/actions\";\nimport { store } from \"react-notifications-component\";\nimport FetchClient from \"../../utils/FetchClient\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Views = ({ match: { url }, history }) => {\n    const [credentials] = useState({\n        email: \"\",\n        password: \"\",\n        passwordRepeat: \"\",\n    });\n    const dispatch = useDispatch();\n\n    const {\n        authUser: { user },\n    } = useStore().getState();\n\n    useEffect(() => {\n        if (user && user.email) {\n            history.push(`/app`);\n        }\n    });\n\n    const handleSubmit = async (values, { setSubmitting }) => {\n        try {\n            const result = await FetchClient.post({\n                url: \"/signup\",\n                body: values,\n            });\n\n            setSubmitting(false);\n\n            if (result) {\n                store.addNotification({\n                    title: \"Success\",\n                    message: result?.message,\n                    type: \"success\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    animationIn: [\"animated\", \"fadeIn\"],\n                    animationOut: [\"animated\", \"fadeOut\"],\n                    dismiss: {\n                        duration: 4000,\n                        onScreen: true,\n                    },\n                });\n\n                history.push(`/login`);\n            }\n        } catch (e) {\n            store.addNotification({\n                title: \"Failure\",\n                message: e.toString(),\n                type: \"danger\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                    duration: 3000,\n                    onScreen: true,\n                },\n            });\n            setSubmitting(false);\n            console.error(e);\n        }\n    };\n\n    const handleValidation = (values) => {\n        const errors = {};\n\n        if (!values.password) {\n            errors.password = \"Required\";\n        }\n\n        if (!values.passwordRepeat) {\n            errors.passwordRepeat = \"Required\";\n        }\n\n        if (\n            values.passwordRepeat &&\n            values.password !== values.passwordRepeat\n        ) {\n            errors.passwordRepeat = \"Passwords are not the same.\";\n        }\n\n        if (values.password && values.password.length < 8) {\n            errors.password = \"Password must be at least 8 characters long.\";\n        }\n\n        if (!values.email) {\n            errors.email = \"Required\";\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = \"Invalid email address\";\n        }\n        return errors;\n    };\n\n    return (\n        <>\n            <div className={\"logoutContainer withSpace\"}>\n                <NavLink to={`/`}>\n                    <i className=\"fas fa-sign-out-alt\" />\n                </NavLink>\n            </div>\n            <div className={\"formContainer m-auto\"}>\n                <h1>Register</h1>\n                <Formik\n                    initialValues={credentials}\n                    validate={handleValidation}\n                    onSubmit={handleSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <form className={\"form\"} onSubmit={handleSubmit}>\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder={\"email\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                            />\n                            <span className={\"formValidationError\"}>\n                                {touched.email && errors.email}\n                            </span>\n                            <input\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder={\"password\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.password}\n                                autoComplete=\"new-password\"\n                            />\n                            <span className={\"formValidationError\"}>\n                                {touched.password && errors.password}\n                            </span>\n                            <input\n                                type=\"password\"\n                                name=\"passwordRepeat\"\n                                placeholder={\"repeat password\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.passwordRepeat}\n                                autoComplete=\"new-password\"\n                            />\n                            <span className={\"formValidationError\"}>\n                                {touched.passwordRepeat &&\n                                    errors.passwordRepeat}\n                            </span>\n                            <button\n                                className={\"formSubmitButton\"}\n                                type=\"submit\"\n                                disabled={isSubmitting}\n                            >\n                                Sign up\n                            </button>\n                        </form>\n                    )}\n                </Formik>\n            </div>\n        </>\n    );\n};\n\nexport default Views;\n"],"sourceRoot":""}